"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"DockerLambdaCustomProps.js","sourceRoot":"","sources":["../../../src/common/props/DockerLambdaCustomProps.ts"],"names":[],"mappings":"","sourcesContent":["// ~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\".\nimport type { aws_codeguruprofiler, aws_iam, aws_kms, aws_lambda, aws_logs, aws_sns, aws_sqs, Duration, Size } from 'aws-cdk-lib';\n\n/**\n * DockerLambdaCustomProps\n */\nexport interface DockerLambdaCustomProps {\n  /**\n   * The source code of your Lambda function.\n   * You can point to a file in an\n   * Amazon Simple Storage Service (Amazon S3) bucket or specify your source\n   * code as inline text.\n   * @stability stable\n   */\n  readonly code: aws_lambda.DockerImageCode;\n  /**\n   * The function execution time (in seconds) after which Lambda terminates the function.\n   * Because the execution time affects cost, set this value\n   * based on the function's expected execution time.\n   * @default Duration.seconds(3)\n   * @stability stable\n   */\n  readonly timeout?: Duration;\n  /**\n   * Sets the system log level for the function.\n   * @default SystemLogLevel.INFO\n   * @stability stable\n   */\n  readonly systemLogLevelV2?: aws_lambda.SystemLogLevel;\n  /**\n   * Enable SnapStart for Lambda Function.\n   * SnapStart is currently supported only for Java 11, 17 runtime\n   * @default - No snapstart\n   * @stability stable\n   */\n  readonly snapStart?: aws_lambda.SnapStartConf;\n  /**\n   * Sets the runtime management configuration for a function's version.\n   * @default Auto\n   * @stability stable\n   */\n  readonly runtimeManagementMode?: aws_lambda.RuntimeManagementMode;\n  /**\n   * The maximum of concurrent executions you want to reserve for the function.\n   * @default - No specific limit - account limit.\n   * @stability stable\n   */\n  readonly reservedConcurrentExecutions?: number;\n  /**\n   * Profiling Group.\n   * @default - A new profiling group will be created if `profiling` is set.\n   * @stability stable\n   */\n  readonly profilingGroup?: aws_codeguruprofiler.IProfilingGroup;\n  /**\n   * Enable profiling.\n   * @default - No profiling.\n   * @stability stable\n   */\n  readonly profiling?: boolean;\n  /**\n   * Specify the configuration of Parameters and Secrets Extension.\n   * @default - No Parameters and Secrets Extension\n   * @stability stable\n   */\n  readonly paramsAndSecrets?: aws_lambda.ParamsAndSecretsLayerVersion;\n  /**\n   * The amount of memory, in MB, that is allocated to your Lambda function.\n   * Lambda uses this value to proportionally allocate the amount of CPU\n   * power. For more information, see Resource Model in the AWS Lambda\n   * Developer Guide.\n   * @default 128\n   * @stability stable\n   */\n  readonly memorySize?: number;\n  /**\n   * The IAM role for the Lambda function associated with the custom resource that sets the retention policy.\n   * This is a legacy API and we strongly recommend you migrate to `logGroup` if you can.\n   * `logGroup` allows you to create a fully customizable log group and instruct the Lambda function to send logs to it.\n   * @default - A new role is created.\n   * @stability stable\n   */\n  readonly logRetentionRole?: aws_iam.IRole;\n  /**\n   * When log retention is specified, a custom resource attempts to create the CloudWatch log group.\n   * These options control the retry policy when interacting with CloudWatch APIs.\n   *\n   * This is a legacy API and we strongly recommend you migrate to `logGroup` if you can.\n   * `logGroup` allows you to create a fully customizable log group and instruct the Lambda function to send logs to it.\n   * @default - Default AWS SDK retry options.\n   * @stability stable\n   */\n  readonly logRetentionRetryOptions?: aws_lambda.LogRetentionRetryOptions;\n  /**\n   * The number of days log events are kept in CloudWatch Logs.\n   * When updating\n   * this property, unsetting it doesn't remove the log retention policy. To\n   * remove the retention policy, set the value to `INFINITE`.\n   *\n   * This is a legacy API and we strongly recommend you move away from it if you can.\n   * Instead create a fully customizable log group with `logs.LogGroup` and use the `logGroup` property\n   * to instruct the Lambda function to send logs to it.\n   * Migrating from `logRetention` to `logGroup` will cause the name of the log group to change.\n   * Users and code and referencing the name verbatim will have to adjust.\n   *\n   * In AWS CDK code, you can access the log group name directly from the LogGroup construct:\n   * ```ts\n   * import * as logs from 'aws-cdk-lib/aws-logs';\n   *\n   * declare const myLogGroup: logs.LogGroup;\n   * myLogGroup.logGroupName;\n   * ```\n   * @default logs.RetentionDays.INFINITE\n   * @stability stable\n   */\n  readonly logRetention?: aws_logs.RetentionDays;\n  /**\n   * The log group the function sends logs to.\n   * By default, Lambda functions send logs to an automatically created default log group named /aws/lambda/\\<function name\\>.\n   * However you cannot change the properties of this auto-created log group using the AWS CDK, e.g. you cannot set a different log retention.\n   *\n   * Use the `logGroup` property to create a fully customizable LogGroup ahead of time, and instruct the Lambda function to send logs to it.\n   *\n   * Providing a user-controlled log group was rolled out to commercial regions on 2023-11-16.\n   * If you are deploying to another type of region, please check regional availability first.\n   * @default `/aws/lambda/${this.functionName}` - default log group created by Lambda\n   * @stability stable\n   */\n  readonly logGroup?: aws_logs.ILogGroup;\n  /**\n   * Sets the loggingFormat for the function.\n   * @default LoggingFormat.TEXT\n   * @stability stable\n   */\n  readonly loggingFormat?: aws_lambda.LoggingFormat;\n  /**\n   * Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets.\n   * Only used if 'vpc' is supplied.\n   * @default false\n   * @stability stable\n   */\n  readonly ipv6AllowedForDualStack?: boolean;\n  /**\n   * Specify the version of CloudWatch Lambda insights to use for monitoring.\n   * @default - No Lambda Insights\n   * @stability stable\n   */\n  readonly insightsVersion?: aws_lambda.LambdaInsightsVersion;\n  /**\n   * Initial policy statements to add to the created Lambda Role.\n   * You can call `addToRolePolicy` to the created lambda to add statements post creation.\n   * @default - No policy statements are added to the created Lambda role.\n   * @stability stable\n   */\n  readonly initialPolicy?: Array<aws_iam.PolicyStatement>;\n  /**\n   * The filesystem configuration for the lambda function.\n   * @default - will not mount any filesystem\n   * @stability stable\n   */\n  readonly filesystem?: aws_lambda.FileSystem;\n  /**\n   * Event sources for this function.\n   * You can also add event sources using `addEventSource`.\n   * @default - No event sources.\n   * @stability stable\n   */\n  readonly events?: Array<aws_lambda.IEventSource>;\n  /**\n   * The size of the function’s /tmp directory in MiB.\n   * @default 512 MiB\n   * @stability stable\n   */\n  readonly ephemeralStorageSize?: Size;\n  /**\n   * The AWS KMS key that's used to encrypt your function's environment variables.\n   * @default - AWS Lambda creates and uses an AWS managed customer master key (CMK).\n   * @stability stable\n   */\n  readonly environmentEncryption?: aws_kms.IKey;\n  /**\n   * Key-value pairs that Lambda caches and makes available for your Lambda functions.\n   * Use environment variables to apply configuration changes, such\n   * as test and production environment configurations, without changing your\n   * Lambda function source code.\n   * @default - No environment variables.\n   * @stability stable\n   */\n  readonly environment?: Record<string, string>;\n  /**\n   * The SNS topic to use as a DLQ.\n   * Note that if `deadLetterQueueEnabled` is set to `true`, an SQS queue will be created\n   * rather than an SNS topic. Using an SNS topic as a DLQ requires this property to be set explicitly.\n   * @default - no SNS topic\n   * @stability stable\n   */\n  readonly deadLetterTopic?: aws_sns.ITopic;\n  /**\n   * Enabled DLQ.\n   * If `deadLetterQueue` is undefined,\n   * an SQS queue with default options will be defined for your Function.\n   * @default - false unless `deadLetterQueue` is set, which implies DLQ is enabled.\n   * @stability stable\n   */\n  readonly deadLetterQueueEnabled?: boolean;\n  /**\n   * The SQS queue to use if DLQ is enabled.\n   * If SNS topic is desired, specify `deadLetterTopic` property instead.\n   * @default - SQS queue with 14 day retention period if `deadLetterQueueEnabled` is `true`\n   * @stability stable\n   */\n  readonly deadLetterQueue?: aws_sqs.IQueue;\n  /**\n   * Options for the `lambda.Version` resource automatically created by the `fn.currentVersion` method.\n   * @default - default options as described in `VersionOptions`\n   * @stability stable\n   */\n  readonly currentVersionOptions?: aws_lambda.VersionOptions;\n  /**\n   * Code signing config associated with this function.\n   * @default - Not Sign the Code\n   * @stability stable\n   */\n  readonly codeSigningConfig?: aws_lambda.ICodeSigningConfig;\n  /**\n   * The system architectures compatible with this lambda function.\n   * @default Architecture.X86_64\n   * @stability stable\n   */\n  readonly architecture?: aws_lambda.Architecture;\n  /**\n   * Sets the application log level for the function.\n   * @default ApplicationLogLevel.INFO\n   * @stability stable\n   */\n  readonly applicationLogLevelV2?: aws_lambda.ApplicationLogLevel;\n  /**\n   * Specify the configuration of AWS Distro for OpenTelemetry (ADOT) instrumentation.\n   * @default - No ADOT instrumentation\n   * @stability stable\n   */\n  readonly adotInstrumentation?: aws_lambda.AdotInstrumentationConfig;\n  /**\n   * The maximum number of times to retry when the function returns an error.\n   * Minimum: 0\n   * Maximum: 2\n   * @default 2\n   * @stability stable\n   */\n  readonly retryAttempts?: number;\n  /**\n   * The destination for successful invocations.\n   * @default - no destination\n   * @stability stable\n   */\n  readonly onSuccess?: aws_lambda.IDestination;\n  /**\n   * The destination for failed invocations.\n   * @default - no destination\n   * @stability stable\n   */\n  readonly onFailure?: aws_lambda.IDestination;\n  /**\n   * The maximum age of a request that Lambda sends to a function for processing.\n   * Minimum: 60 seconds\n   * Maximum: 6 hours\n   * @default Duration.hours(6)\n   * @stability stable\n   */\n  readonly maxEventAge?: Duration;\n}\n"]}