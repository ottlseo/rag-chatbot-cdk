"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGeneratePresignedUrlFn = exports.createS3FileUploader = exports.buildSecurityGroup = exports.createStepFunctionsExecutionHandlerRole = exports.getUpdateKendraJobStatusLambdaRole = exports.getCheckJobStatusLambdaRole = exports.getKendraStartDataSyncLambdaRole = exports.getStartKendraSyncStepFnRole = exports.getGeneratePresignedUrlLambdaRole = exports.createKendraWorkflowStepFunction = exports.createS3DataSource = void 0;
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("node:path");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const kendra = require("aws-cdk-lib/aws-kendra");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
const iam_roles_helper_1 = require("./iam-roles-helper");
const kendra_utils_1 = require("./kendra-utils");
const utils_1 = require("./utils");
function createS3DataSource(scope, targetIndex, id, clientProps) {
    // We go through some hoops here to extract the various inputs, because we need to narrow
    // the type to remove the union with IResolvable
    const dataSourceConfig = clientProps.dataSourceConfiguration;
    if (!dataSourceConfig) {
        throw new Error('Error - an S3 Kendra DataSource requires an DataSourceConfiguration prop');
    }
    const s3DataSourceConfig = dataSourceConfig.s3Configuration;
    if (!s3DataSourceConfig) {
        throw new Error('Error - an S3 Kendra DataSource requires an DataSourceConfiguration.S3Configuration prop');
    }
    // No Bucket name is an error
    if (!s3DataSourceConfig.bucketName) {
        throw new Error('Error - an S3 Kendra DataSource requires the DataSourceConfiguration.S3Configuration.bucketName prop');
    }
    // If there's no role, make a role and put it into defaultProps
    // Put bucket name in default props
    let defaultProps = {
        indexId: targetIndex.ref,
        name: (0, utils_1.generatePhysicalName)('', ['s3-datasource', id], 1000),
        type: 'S3',
    };
    // Return consolidated default and user props
    if (!clientProps.roleArn) {
        const s3CrawlPolicy = new iam.PolicyDocument({
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        's3:GetObject',
                    ],
                    resources: [
                        `arn:aws:s3:::${s3DataSourceConfig.bucketName}/*`,
                    ],
                    effect: iam.Effect.ALLOW,
                }),
                new iam.PolicyStatement({
                    actions: [
                        's3:ListBucket',
                    ],
                    resources: [
                        `arn:aws:s3:::${s3DataSourceConfig.bucketName}`,
                    ],
                    effect: iam.Effect.ALLOW,
                }),
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: [
                        'kendra:BatchPutDocument',
                        'kendra:BatchDeleteDocument',
                    ],
                    resources: [
                        targetIndex.attrArn,
                    ],
                }),
            ],
        });
        const dataSourceRole = new iam.Role(scope, `data-source-role-${id}`, {
            assumedBy: new iam.ServicePrincipal('kendra.amazonaws.com'),
            description: 'Policy for Kendra S3 Data Source',
            inlinePolicies: {
                s3CrawlPolicy,
            },
        });
        defaultProps = (0, kendra_utils_1.overrideProps)(defaultProps, { roleArn: dataSourceRole.roleArn });
    }
    const consolidatedProps = (0, kendra_utils_1.consolidateProps)(defaultProps, clientProps);
    return new kendra.CfnDataSource(scope, `data-source-${id}`, consolidatedProps);
}
exports.createS3DataSource = createS3DataSource;
function createKendraWorkflowStepFunction(cdkStack, updateKendraJobStatusFn, kendraSyncLambda, createCheckJobsStatusLambda) {
    const docProcessingLogGroup = new cdk.aws_logs.LogGroup(cdkStack, 'DocProcessingStateMachineLog', {
        removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    });
    // TODO(miketran): Eventually make this event driven
    const waitFor30Secs = new cdk.aws_stepfunctions.Wait(cdkStack, 'Wait 30 Seconds', {
        time: cdk.aws_stepfunctions.WaitTime.duration(cdk.Duration.seconds(30)),
    });
    const getKendraJobStatus = (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Get Textract Job Status', createCheckJobsStatusLambda);
    // Step function Def
    const docProcessingDefinition = (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Starts a new Kendra Data Sync Job', kendraSyncLambda)
        .next(getKendraJobStatus)
        .next(new cdk.aws_stepfunctions.Choice(cdkStack, 'Kendra DataSync Job Complete?')
        .when(cdk.aws_stepfunctions.Condition.stringEquals('$.KendraJobStatus', 'FAILED'), (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Update Document Status as Failure', updateKendraJobStatusFn))
        .when(cdk.aws_stepfunctions.Condition.stringEquals('$.KendraJobStatus', 'ABORTED'), (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Update Document Status as Aborted', updateKendraJobStatusFn))
        .when(cdk.aws_stepfunctions.Condition.stringEquals('$.KendraJobStatus', 'INCOMPLETE'), (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Update Document Status as Incomplete', updateKendraJobStatusFn))
        .when(cdk.aws_stepfunctions.Condition.stringEquals('$.KendraJobStatus', 'SUCCEEDED'), (0, kendra_utils_1.getStepFnLambdaInvoke)(cdkStack, 'Update Document Status as Completed', updateKendraJobStatusFn))
        .otherwise(waitFor30Secs.next(getKendraJobStatus)));
    const definitionDocProcessingBody = aws_stepfunctions_1.DefinitionBody.fromChainable(docProcessingDefinition);
    return new cdk.aws_stepfunctions.StateMachine(cdkStack, 'DocProcessingStateMachine', {
        definitionBody: definitionDocProcessingBody,
        tracingEnabled: true,
        logs: {
            destination: docProcessingLogGroup,
            level: cdk.aws_stepfunctions.LogLevel.ALL,
        },
    });
}
exports.createKendraWorkflowStepFunction = createKendraWorkflowStepFunction;
function getGeneratePresignedUrlLambdaRole(scope, bucket) {
    const role = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(scope, 'generatePresignedUrlRole', 'Role used by the Generate Pre-signed URL Lambda functio');
    (0, iam_roles_helper_1.addRolePolicies)(role, [
        {
            actions: ['s3:PutObject'],
            resources: [bucket.bucketArn],
        },
        {
            actions: [
                'ec2:DescribeInstances',
                'ec2:CreateNetworkInterface',
                'ec2:AttachNetworkInterface',
                'ec2:DescribeNetworkInterfaces',
                'autoscaling:CompleteLifecycleAction',
                'ec2:DeleteNetworkInterface',
            ],
            resources: ['*'],
        },
    ]);
    return role;
}
exports.getGeneratePresignedUrlLambdaRole = getGeneratePresignedUrlLambdaRole;
function getStartKendraSyncStepFnRole(scope, stateMachine) {
    const role = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(scope, 'startKendraSyncStepFnRole', 'Role used for starting Kendra sync state machine');
    (0, iam_roles_helper_1.addRolePolicies)(role, [
        {
            actions: ['states:StartExecution'],
            resources: [stateMachine.stateMachineArn],
        },
        {
            actions: [
                'ec2:DescribeInstances',
                'ec2:CreateNetworkInterface',
                'ec2:AttachNetworkInterface',
                'ec2:DescribeNetworkInterfaces',
                'autoscaling:CompleteLifecycleAction',
                'ec2:DeleteNetworkInterface',
            ],
            resources: ['*'],
        },
    ]);
    return role;
}
exports.getStartKendraSyncStepFnRole = getStartKendraSyncStepFnRole;
function getKendraStartDataSyncLambdaRole(scope, table, awsRegion, awsAccountId, kendraIndexId, kendraDataSourceIndexId) {
    const role = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(scope, 'startDataSyncRole', 'Role used by the Document Status Update Lambda function');
    (0, iam_roles_helper_1.addRolePolicies)(role, [
        {
            actions: ['dynamodb:PutItem', 'dynamodb:Query', 'dynamodb:GetItem', 'dynamodb:UpdateItem'],
            resources: [table.tableArn],
        },
        {
            actions: ['kendra:StartDataSourceSyncJob'],
            resources: [
                `arn:aws:kendra:${awsRegion}:${awsAccountId}:index/${kendraIndexId}`,
                `arn:aws:kendra:${awsRegion}:${awsAccountId}:index/${kendraIndexId}/data-source/${kendraDataSourceIndexId}`,
            ],
        },
        {
            actions: [
                'ec2:DescribeInstances',
                'ec2:CreateNetworkInterface',
                'ec2:AttachNetworkInterface',
                'ec2:DescribeNetworkInterfaces',
                'autoscaling:CompleteLifecycleAction',
                'ec2:DeleteNetworkInterface',
            ],
            resources: ['*'],
        },
    ]);
    return role;
}
exports.getKendraStartDataSyncLambdaRole = getKendraStartDataSyncLambdaRole;
function getCheckJobStatusLambdaRole(scope, awsRegion, awsAccountId, kendraIndexId, kendraDataSourceIndexId) {
    const role = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(scope, 'textTractLambdaRole', 'Role used by the Text Extract Lambda function');
    (0, iam_roles_helper_1.addRolePolicies)(role, [
        {
            actions: ['kendra:ListDataSourceSyncJobs'],
            resources: [`arn:aws:kendra:${awsRegion}:${awsAccountId}:index/${kendraIndexId}`],
        },
        {
            actions: ['kendra:ListDataSourceSyncJobs'],
            resources: [`arn:aws:kendra:${awsRegion}:${awsAccountId}:index/${kendraIndexId}/data-source/${kendraDataSourceIndexId}`],
        },
    ]);
    return role;
}
exports.getCheckJobStatusLambdaRole = getCheckJobStatusLambdaRole;
function getUpdateKendraJobStatusLambdaRole(scope, table) {
    const role = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(scope, 'updateKendraJobStatus', 'Role used by the Document Status Update Lambda function');
    (0, iam_roles_helper_1.addRolePolicies)(role, [
        {
            actions: ['dynamodb:PutItem', 'dynamodb:Query', 'dynamodb:GetItem', 'dynamodb:UpdateItem'],
            resources: [table.tableArn],
        },
        {
            actions: [
                'ec2:DescribeInstances',
                'ec2:CreateNetworkInterface',
                'ec2:AttachNetworkInterface',
                'ec2:DescribeNetworkInterfaces',
                'autoscaling:CompleteLifecycleAction',
                'ec2:DeleteNetworkInterface',
            ],
            resources: ['*'],
        },
    ]);
    return role;
}
exports.getUpdateKendraJobStatusLambdaRole = getUpdateKendraJobStatusLambdaRole;
function createStepFunctionsExecutionHandlerRole(cdkStack, docProcessingStateMachine) {
    const stepFunctionsExecutionHandlerRole = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(cdkStack, 'stepFunctionsExecutionHandlerRole', 'Role used by the stepFunctionsExecutionHandlerFn Lambda function');
    stepFunctionsExecutionHandlerRole.node.addDependency(docProcessingStateMachine);
    (0, iam_roles_helper_1.addRolePolicies)(stepFunctionsExecutionHandlerRole, [{
            actions: ['states:StartExecution'],
            resources: [
                docProcessingStateMachine.stateMachineArn,
            ],
        }]);
    return stepFunctionsExecutionHandlerRole;
}
exports.createStepFunctionsExecutionHandlerRole = createStepFunctionsExecutionHandlerRole;
function buildSecurityGroup(scope, name, props, ingressRules, egressRules) {
    const newSecurityGroup = new aws_ec2_1.SecurityGroup(scope, `${name}-security-group`, props);
    ingressRules.forEach(rule => {
        newSecurityGroup.addIngressRule(rule.peer, rule.connection, rule.description, rule.remoteRule);
    });
    egressRules.forEach(rule => {
        newSecurityGroup.addEgressRule(rule.peer, rule.connection, rule.description, rule.remoteRule);
    });
    (0, utils_1.addCfnSuppressRules)(newSecurityGroup, [
        {
            id: 'W5',
            reason: 'Egress of 0.0.0.0/0 is default and generally considered OK',
        },
        {
            id: 'W40',
            reason: 'Egress IPProtocol of -1 is default and generally considered OK',
        },
    ]);
    return newSecurityGroup;
}
exports.buildSecurityGroup = buildSecurityGroup;
function createS3FileUploader(cdkStack, s3_bucket, props) {
    const createS3FileUploaderRole = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(cdkStack, 's3FileUploader', 'Role used by the S3 file uploader Lambda function');
    (0, iam_roles_helper_1.addRolePolicies)(createS3FileUploaderRole, [{
            actions: ['s3:PutObject', 's3:PutObjectAcl', 's3:GetObject'],
            resources: [s3_bucket.bucketArn],
        }]);
    return new aws_lambda_1.DockerImageFunction(cdkStack, 's3FileUploaderFn', {
        ...props,
        role: createS3FileUploaderRole,
    });
}
exports.createS3FileUploader = createS3FileUploader;
function createGeneratePresignedUrlFn(cdkStack, bucket, environment) {
    const generatePresignedUrlRole = (0, iam_roles_helper_1.createIAMRoleWithBasicExecutionPolicy)(cdkStack, 'generatePresignedUrlRole', 'Role used by the Generate Pre-signed URL Lambda functio');
    (0, iam_roles_helper_1.addRolePolicies)(generatePresignedUrlRole, [
        {
            actions: ['s3:PutObject'],
            resources: [bucket.bucketArn],
        },
    ]);
    const lambdaGenerateUrlFn = new cdk.aws_lambda.Function(cdkStack, 'generatePresignedUrlFN', {
        runtime: cdk.aws_lambda.Runtime.PYTHON_3_10,
        handler: 'generate_presigned_url.lambda_handler',
        code: cdk.aws_lambda.Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/generate_presigned_url/')),
        timeout: cdk.Duration.seconds(60),
        memorySize: 256,
        role: generatePresignedUrlRole,
        environment,
    });
    return lambdaGenerateUrlFn;
}
exports.createGeneratePresignedUrlFn = createGeneratePresignedUrlFn;
//# sourceMappingURL=data:application/json;base64,