"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePromptOverrideConfiguration = exports.validateInferenceConfiguration = exports.Agent = exports.PromptState = exports.PromptCreationMode = exports.ParserMode = exports.PromptType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const constructs_1 = require("constructs");
const agent_action_group_1 = require("./agent-action-group");
const agent_alias_1 = require("./agent-alias");
const utils_1 = require("../../common/helpers/utils");
/**
 * The step in the agent sequence that this prompt configuration applies to.
 */
var PromptType;
(function (PromptType) {
    PromptType["PRE_PROCESSING"] = "PRE_PROCESSING";
    PromptType["ORCHESTRATION"] = "ORCHESTRATION";
    PromptType["POST_PROCESSING"] = "POST_PROCESSING";
    PromptType["KNOWLEDGE_BASE_RESPONSE_GENERATION"] = "KNOWLEDGE_BASE_RESPONSE_GENERATION";
})(PromptType || (exports.PromptType = PromptType = {}));
/**
 * Specifies whether to override the default parser Lambda function when
 * parsing the raw foundation model output in the part of the agent sequence
 * defined by the promptType. If you set the field as OVERRIDEN, the
 * overrideLambda field in the PromptOverrideConfiguration must be specified
 * with the ARN of a Lambda function.
 */
var ParserMode;
(function (ParserMode) {
    ParserMode["DEFAULT"] = "DEFAULT";
    ParserMode["OVERRIDDEN"] = "OVERRIDDEN";
})(ParserMode || (exports.ParserMode = ParserMode = {}));
/**
 * Specifies whether to override the default prompt template for this
 * promptType. Set this value to OVERRIDDEN to use the prompt that you
 * provide in the basePromptTemplate. If you leave it as DEFAULT, the agent
 * uses a default prompt template.
 */
var PromptCreationMode;
(function (PromptCreationMode) {
    PromptCreationMode["DEFAULT"] = "DEFAULT";
    PromptCreationMode["OVERRIDDEN"] = "OVERRIDDEN";
})(PromptCreationMode || (exports.PromptCreationMode = PromptCreationMode = {}));
/**
 * Specifies whether to allow the agent to carry out the step specified in the
 * promptType. If you set this value to DISABLED, the agent skips that step.
 * The default state for each promptType is as follows.
 *
 *     PRE_PROCESSING – ENABLED
 *     ORCHESTRATION – ENABLED
 *     KNOWLEDGE_BASE_RESPONSE_GENERATION – ENABLED
 *     POST_PROCESSING – DISABLED
 */
var PromptState;
(function (PromptState) {
    PromptState["ENABLED"] = "ENABLED";
    PromptState["DISABLED"] = "DISABLED";
})(PromptState || (exports.PromptState = PromptState = {}));
/**
 * Deploy a Bedrock Agent.
 */
class Agent extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * A list of values to indicate if PrepareAgent or an Alias needs to be updated.
         * @private
         */
        this.resourceUpdates = [];
        /**
         * A list of action groups associated with the agent
         * @private
         */
        this.actionGroups = [];
        /**
         * A list of KnowledgeBases associated with the agent.
         *
         * @default - No knowledge base is used.
         */
        this.knowledgeBases = [];
        validatePromptOverrideConfiguration(props.promptOverrideConfiguration);
        validateModel(props.foundationModel);
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'bedrock-agent', { maxLength: 32, lower: true, separator: '-' });
        if (props.existingRole) {
            this.role = props.existingRole;
        }
        else {
            this.role = new iam.Role(this, 'Role', {
                assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),
                roleName: (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForAgents_', { maxLength: 64, lower: false }),
            });
            this.role.assumeRolePolicy.addStatements(new iam.PolicyStatement({
                actions: ['sts:AssumeRole'],
                principals: [new iam.ServicePrincipal('bedrock.amazonaws.com')],
                conditions: {
                    StringEquals: {
                        'aws:SourceAccount': cdk.Stack.of(this).account,
                    },
                    ArnLike: {
                        'aws:SourceArn': cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    },
                },
            }));
            new iam.Policy(this, 'AgentFMPolicy', {
                roles: [this.role],
                statements: [
                    new iam.PolicyStatement({
                        actions: ['bedrock:InvokeModel'],
                        resources: [props.foundationModel.asArn(this)],
                    }),
                ],
            });
        }
        const agent = new aws_cdk_lib_1.aws_bedrock.CfnAgent(this, 'Agent', {
            agentName: this.name,
            foundationModel: String(props.foundationModel),
            instruction: props.instruction,
            description: props.description,
            idleSessionTtlInSeconds: props.idleSessionTTL?.toSeconds(),
            agentResourceRoleArn: this.role.roleArn,
            customerEncryptionKeyArn: props.encryptionKey?.keyArn,
            tags: props.tags,
            promptOverrideConfiguration: props.promptOverrideConfiguration,
            autoPrepare: props.shouldPrepareAgent,
            guardrailConfiguration: {
                guardrailIdentifier: props.guardrailConfiguration?.guardrailId,
                guardrailVersion: props.guardrailConfiguration?.guardrailVersion,
            },
        });
        this.agentInstance = agent;
        this.agentId = agent.attrAgentId;
        this.agentArn = agent.attrAgentArn;
        this.agentversion = agent.attrAgentVersion;
        this._addAliasDependency(agent.attrUpdatedAt);
        if (props.aliasName) {
            const alias = this.addAlias({
                aliasName: props.aliasName,
            });
            this.aliasId = alias.aliasId;
            this.aliasArn = alias.aliasArn;
            this.aliasName = alias.aliasName;
        }
        if (props.knowledgeBases) {
            this.addKnowledgeBases(props.knowledgeBases);
        }
        if (props.actionGroups) {
            this.addActionGroups(props.actionGroups);
        }
        // To allow your agent to request the user for additional information
        // when trying to complete a task , add this action group
        if (props.enableUserInput) {
            this.addActionGroup(new agent_action_group_1.AgentActionGroup(this, 'userInputEnabledActionGroup', {
                actionGroupName: 'UserInputAction',
                parentActionGroupSignature: 'AMAZON.UserInput',
                actionGroupState: 'ENABLED',
            }));
        }
    }
    /**
     * Add an alias to the agent.
     */
    addAlias(props) {
        const alias = new agent_alias_1.AgentAlias(this, `AgentAlias-${props.aliasName}`, {
            agentId: this.agentId,
            agentVersion: props.agentVersion,
            resourceUpdates: cdk.Lazy.list({ produce: () => this.resourceUpdates }),
            aliasName: props.aliasName,
            description: props.description,
        });
        return alias;
    }
    /**
     * Add knowledge bases to the agent.
     */
    addKnowledgeBases(knowledgeBases) {
        for (const kb of knowledgeBases) {
            this.addKnowledgeBase(kb);
        }
    }
    /**
     * Add knowledge base to the agent.
     */
    addKnowledgeBase(knowledgeBase) {
        if (!knowledgeBase.instruction) {
            throw new Error('Agent Knowledge Bases require instructions.');
        }
        new iam.Policy(this, `AgentKBPolicy-${knowledgeBase.name}`, {
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:UpdateKnowledgeBase',
                        'bedrock:Retrieve',
                    ],
                    resources: [knowledgeBase.knowledgeBaseArn],
                }),
            ],
        });
        const agentKnowledgeBaseProperty = {
            description: knowledgeBase.instruction, // known issue: wrong parameter mapping in Cfn. Workaround: pass instruction through description
            knowledgeBaseId: knowledgeBase.knowledgeBaseId,
            knowledgeBaseState: knowledgeBase.knowledgeBaseState,
        };
        if (!this.agentInstance.knowledgeBases || !Array.isArray(this.agentInstance.knowledgeBases)) {
            this.agentInstance.knowledgeBases = [agentKnowledgeBaseProperty];
        }
        else {
            this.agentInstance.knowledgeBases.push(agentKnowledgeBaseProperty);
        }
    }
    /**
     * Add action group to the agent.
     */
    addActionGroup(actionGroup) {
        actionGroup.actionGroupExecutor?.lambda?.addPermission('AgentLambdaInvocationPolicy', {
            principal: new iam.ServicePrincipal('bedrock.amazonaws.com'),
            sourceArn: this.agentArn,
            sourceAccount: cdk.Stack.of(this).account,
        });
        if (!this.agentInstance.actionGroups || !Array.isArray(this.agentInstance.actionGroups)) {
            this.agentInstance.actionGroups = [actionGroup.actionGroupProperty];
        }
        else {
            this.agentInstance.actionGroups.push(actionGroup.actionGroupProperty);
        }
    }
    /**
     * Add action groups to the agent.
     */
    addActionGroups(actionGroups) {
        for (const actionGroup of actionGroups) {
            this.addActionGroup(actionGroup);
        }
    }
    /**
     * Add guardrail to the agent.
     */
    addGuardrail(guardrail) {
        new iam.Policy(this, `AgentGuardrailPolicy-${guardrail.name}`, {
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:ApplyGuardrail',
                    ],
                    resources: [`arn:${cdk.Aws.PARTITION}:bedrock:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:guardrail/${guardrail.guardrailId}`],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'kms:Decrypt',
                    ],
                    resources: [guardrail.kmsKeyArn],
                    conditions: {
                        StringEquals: {
                            'aws:ResourceAccount': cdk.Aws.ACCOUNT_ID,
                        },
                    },
                }),
            ],
        });
        this.agentInstance.guardrailConfiguration = {
            guardrailIdentifier: guardrail.guardrailId,
            guardrailVersion: guardrail.guardrailVersion,
        };
    }
    /**
     * Register a dependency for aliases.
     *
     * @param updatedAt - The updatedAt of the resource that will be registered as a dependency.
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _addAliasDependency(updatedAt) {
        if (updatedAt) {
            this.resourceUpdates.push(updatedAt);
        }
    }
}
exports.Agent = Agent;
_a = JSII_RTTI_SYMBOL_1;
Agent[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Agent", version: "0.1.216" };
/**
 * Validate that Bedrock Agents can use the selected model.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateModel(foundationModel) {
    if (!foundationModel.supportsAgents) {
        throw new Error(`The model ${foundationModel} is not supported by Bedrock Agents.`);
    }
}
/**
 * Validate the inferenceConfiguration of a prompt override.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateInferenceConfiguration(inferenceConfiguration) {
    if (inferenceConfiguration.topK < 0 || inferenceConfiguration.topK > 500) {
        throw new Error('topK must be between 0 and 500');
    }
    if (!Number.isInteger(inferenceConfiguration.topK)) {
        throw new Error('topK must be an integer');
    }
    if (inferenceConfiguration.stopSequences.length > 4) {
        throw new Error('stopSequences cannot contain more than 4 elements');
    }
    if (inferenceConfiguration.maximumLength < 0 || inferenceConfiguration.maximumLength > 4096) {
        throw new Error('maximumLength must be between 0 and 4096');
    }
    if (!Number.isInteger(inferenceConfiguration.maximumLength)) {
        throw new Error('maximumLength must be an integer');
    }
    if (inferenceConfiguration.topP < 0 || inferenceConfiguration.topP > 1) {
        throw new Error('topP must be between 0 and 1');
    }
    if (inferenceConfiguration.temperature < 0 || inferenceConfiguration.temperature > 1) {
        throw new Error('temperature must be between 0 and 1');
    }
}
exports.validateInferenceConfiguration = validateInferenceConfiguration;
/**
 * Validate the promptOverrideConfiguration.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validatePromptOverrideConfiguration(promptOverrideConfiguration) {
    if (!promptOverrideConfiguration) {
        return;
    }
    if (promptOverrideConfiguration.overrideLambda &&
        promptOverrideConfiguration.promptConfigurations.some(pc => pc.parserMode !== ParserMode.OVERRIDDEN)) {
        throw new Error('overrideLambda can only be used if all promptConfigurations have a parserMode value of OVERRIDDEN');
    }
    if (!promptOverrideConfiguration.overrideLambda &&
        promptOverrideConfiguration.promptConfigurations.some(pc => pc.parserMode === ParserMode.OVERRIDDEN)) {
        throw new Error('At least one promptConfiguration has a parserMode value of OVERRIDDEN, but no overrideLambda is specified');
    }
    // check inferenceConfiguration number types
    Object.values(promptOverrideConfiguration.promptConfigurations).forEach(pc => {
        validateInferenceConfiguration(pc.inferenceConfiguration);
    });
    return;
}
exports.validatePromptOverrideConfiguration = validatePromptOverrideConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2RrLWxpYi9iZWRyb2NrL2FnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxtQ0FBbUM7QUFDbkMsNkNBQXFEO0FBQ3JELDJDQUEyQztBQUUzQywyQ0FBdUM7QUFFdkMsNkRBQXdEO0FBQ3hELCtDQUEyQztBQUszQyxzREFBb0U7QUFHcEU7O0dBRUc7QUFDSCxJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDcEIsK0NBQWlDLENBQUE7SUFDakMsNkNBQStCLENBQUE7SUFDL0IsaURBQW1DLENBQUE7SUFDbkMsdUZBQXlFLENBQUE7QUFDM0UsQ0FBQyxFQUxXLFVBQVUsMEJBQVYsVUFBVSxRQUtyQjtBQUVEOzs7Ozs7R0FNRztBQUNILElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNwQixpQ0FBbUIsQ0FBQTtJQUNuQix1Q0FBeUIsQ0FBQTtBQUMzQixDQUFDLEVBSFcsVUFBVSwwQkFBVixVQUFVLFFBR3JCO0FBRUQ7Ozs7O0dBS0c7QUFDSCxJQUFZLGtCQUdYO0FBSEQsV0FBWSxrQkFBa0I7SUFDNUIseUNBQW1CLENBQUE7SUFDbkIsK0NBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQUhXLGtCQUFrQixrQ0FBbEIsa0JBQWtCLFFBRzdCO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ3JCLGtDQUFtQixDQUFBO0lBQ25CLG9DQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxXQUFXLDJCQUFYLFdBQVcsUUFHdEI7QUFrUUQ7O0dBRUc7QUFDSCxNQUFhLEtBQU0sU0FBUSxzQkFBUztJQXdEbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQjtRQUN6RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBcEJuQjs7O1dBR0c7UUFDSyxvQkFBZSxH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bkQsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxVQUFVLENBQzlDLEVBQUUsQ0FBQztRQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMsbUdBQW1HLENBQUMsQ0FBQztJQUN2SCxDQUFDO0lBRUQsSUFDRSxDQUFDLDJCQUEyQixDQUFDLGNBQWM7UUFDM0MsMkJBQTJCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUNuRCxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLFVBQVUsQ0FDOUMsRUFBRSxDQUFDO1FBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQywyR0FBMkcsQ0FBQyxDQUFDO0lBQy9ILENBQUM7SUFFRCw0Q0FBNEM7SUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzRSw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87QUFDVCxDQUFDO0FBM0JELGtGQTJCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBhd3NfYmVkcm9jayBhcyBiZWRyb2NrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMga21zIGZyb20gJ2F3cy1jZGstbGliL2F3cy1rbXMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbmltcG9ydCB7IEFnZW50QWN0aW9uR3JvdXAgfSBmcm9tICcuL2FnZW50LWFjdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBBZ2VudEFsaWFzIH0gZnJvbSAnLi9hZ2VudC1hbGlhcyc7XG5pbXBvcnQgeyBHdWFyZHJhaWwgfSBmcm9tICcuL2d1YXJkcmFpbHMnO1xuaW1wb3J0IHsgS25vd2xlZGdlQmFzZSB9IGZyb20gJy4va25vd2xlZGdlLWJhc2UnO1xuaW1wb3J0IHsgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbCB9IGZyb20gJy4vbW9kZWxzJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMiB9IGZyb20gJy4uLy4uL2NvbW1vbi9oZWxwZXJzL3V0aWxzJztcblxuXG4vKipcbiAqIFRoZSBzdGVwIGluIHRoZSBhZ2VudCBzZXF1ZW5jZSB0aGF0IHRoaXMgcHJvbXB0IGNvbmZpZ3VyYXRpb24gYXBwbGllcyB0by5cbiAqL1xuZXhwb3J0IGVudW0gUHJvbXB0VHlwZSB7XG4gIFBSRV9QUk9DRVNTSU5HID0gJ1BSRV9QUk9DRVNTSU5HJyxcbiAgT1JDSEVTVFJBVElPTiA9ICdPUkNIRVNUUkFUSU9OJyxcbiAgUE9TVF9QUk9DRVNTSU5HID0gJ1BPU1RfUFJPQ0VTU0lORycsXG4gIEtOT1dMRURHRV9CQVNFX1JFU1BPTlNFX0dFTkVSQVRJT04gPSAnS05PV0xFREdFX0JBU0VfUkVTUE9OU0VfR0VORVJBVElPTidcbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgd2hldGhlciB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBwYXJzZXIgTGFtYmRhIGZ1bmN0aW9uIHdoZW5cbiAqIHBhcnNpbmcgdGhlIHJhdyBmb3VuZGF0aW9uIG1vZGVsIG91dHB1dCBpbiB0aGUgcGFydCBvZiB0aGUgYWdlbnQgc2VxdWVuY2VcbiAqIGRlZmluZWQgYnkgdGhlIHByb21wdFR5cGUuIElmIHlvdSBzZXQgdGhlIGZpZWxkIGFzIE9WRVJSSURFTiwgdGhlXG4gKiBvdmVycmlkZUxhbWJkYSBmaWVsZCBpbiB0aGUgUHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uIG11c3QgYmUgc3BlY2lmaWVkXG4gKiB3aXRoIHRoZSBBUk4gb2YgYSBMYW1iZGEgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBlbnVtIFBhcnNlck1vZGUge1xuICBERUZBVUxUID0gJ0RFRkFVTFQnLFxuICBPVkVSUklEREVOID0gJ09WRVJSSURERU4nXG59XG5cbi8qKlxuICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgcHJvbXB0IHRlbXBsYXRlIGZvciB0aGlzXG4gKiBwcm9tcHRUeXBlLiBTZXQgdGhpcyB2YWx1ZSB0byBPVkVSUklEREVOIHRvIHVzZSB0aGUgcHJvbXB0IHRoYXQgeW91XG4gKiBwcm92aWRlIGluIHRoZSBiYXNlUHJvbXB0VGVtcGxhdGUuIElmIHlvdSBsZWF2ZSBpdCBhcyBERUZBVUxULCB0aGUgYWdlbnRcbiAqIHVzZXMgYSBkZWZhdWx0IHByb21wdCB0ZW1wbGF0ZS5cbiAqL1xuZXhwb3J0IGVudW0gUHJvbXB0Q3JlYXRpb25Nb2RlIHtcbiAgREVGQVVMVCA9ICdERUZBVUxUJyxcbiAgT1ZFUlJJRERFTiA9ICdPVkVSUklEREVOJ1xufVxuXG4vKipcbiAqIFNwZWNpZmllcyB3aGV0aGVyIHRvIGFsbG93IHRoZSBhZ2VudCB0byBjYXJyeSBvdXQgdGhlIHN0ZXAgc3BlY2lmaWVkIGluIHRoZVxuICogcHJvbXB0VHlwZS4gSWYgeW91IHNldCB0aGlzIHZhbHVlIHRvIERJU0FCTEVELCB0aGUgYWdlbnQgc2tpcHMgdGhhdCBzdGVwLlxuICogVGhlIGRlZmF1bHQgc3RhdGUgZm9yIGVhY2ggcHJvbXB0VHlwZSBpcyBhcyBmb2xsb3dzLlxuICpcbiAqICAgICBQUkVfUFJPQ0VTU0lORyDigJMgRU5BQkxFRFxuICogICAgIE9SQ0hFU1RSQVRJT04g4oCTIEVOQUJMRURcbiAqICAgICBLTk9XTEVER0VfQkFTRV9SRVNQT05TRV9HRU5FUkFUSU9OIOKAkyBFTkFCTEVEXG4gKiAgICAgUE9TVF9QUk9DRVNTSU5HIOKAkyBESVNBQkxFRFxuICovXG5leHBvcnQgZW51bSBQcm9tcHRTdGF0ZSB7XG4gIEVOQUJMRUQgPSAnRU5BQkxFRCcsXG4gIERJU0FCTEVEID0gJ0RJU0FCTEVEJ1xufVxuXG4vKiogRGV0YWlscyBhYm91dCB0aGUgZ3VhcmRyYWlsIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWdlbnQuICovXG5leHBvcnQgaW50ZXJmYWNlIEd1YXJkcmFpbENvbmZpZ3VyYXRpb24ge1xuICAvKlRoZSB2ZXJzaW9uIG9mIHRoZSBndWFyZHJhaWwuKi9cbiAgcmVhZG9ubHkgZ3VhcmRyYWlsVmVyc2lvbj86IHN0cmluZztcbiAgLypUaGUgaWRlbnRpZmllZCBvZiB0aGUgZ3VhcmRyYWlsLiovXG4gIHJlYWRvbmx5IGd1YXJkcmFpbElkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIExMTSBpbmZlcmVuY2UgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZUNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogVGhlIGxpa2VsaWhvb2Qgb2YgdGhlIG1vZGVsIHNlbGVjdGluZyBoaWdoZXItcHJvYmFiaWxpdHkgb3B0aW9ucyB3aGlsZVxuICAgKiBnZW5lcmF0aW5nIGEgcmVzcG9uc2UuIEEgbG93ZXIgdmFsdWUgbWFrZXMgdGhlIG1vZGVsIG1vcmUgbGlrZWx5IHRvIGNob29zZVxuICAgKiBoaWdoZXItcHJvYmFiaWxpdHkgb3B0aW9ucywgd2hpbGUgYSBoaWdoZXIgdmFsdWUgbWFrZXMgdGhlIG1vZGVsIG1vcmVcbiAgICogbGlrZWx5IHRvIGNob29zZSBsb3dlci1wcm9iYWJpbGl0eSBvcHRpb25zLlxuICAgKlxuICAgKiBGbG9hdGluZyBwb2ludFxuICAgKlxuICAgKiBtaW4gMFxuICAgKiBtYXggMVxuICAgKi9cbiAgcmVhZG9ubHkgdGVtcGVyYXR1cmU6IG51bWJlcjtcbiAgLyoqXG4gICAqIFdoaWxlIGdlbmVyYXRpbmcgYSByZXNwb25zZSwgdGhlIG1vZGVsIGRldGVybWluZXMgdGhlIHByb2JhYmlsaXR5IG9mIHRoZVxuICAgKiBmb2xsb3dpbmcgdG9rZW4gYXQgZWFjaCBwb2ludCBvZiBnZW5lcmF0aW9uLiBUaGUgdmFsdWUgdGhhdCB5b3Ugc2V0IGZvclxuICAgKiBUb3AgUCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgbW9zdC1saWtlbHkgY2FuZGlkYXRlcyBmcm9tIHdoaWNoIHRoZSBtb2RlbFxuICAgKiBjaG9vc2VzIHRoZSBuZXh0IHRva2VuIGluIHRoZSBzZXF1ZW5jZS4gRm9yIGV4YW1wbGUsIGlmIHlvdSBzZXQgdG9wUCB0b1xuICAgKiA4MCwgdGhlIG1vZGVsIG9ubHkgc2VsZWN0cyB0aGUgbmV4dCB0b2tlbiBmcm9tIHRoZSB0b3AgODAlIG9mIHRoZVxuICAgKiBwcm9iYWJpbGl0eSBkaXN0cmlidXRpb24gb2YgbmV4dCB0b2tlbnMuXG4gICAqXG4gICAqIEZsb2F0aW5nIHBvaW50XG4gICAqXG4gICAqIG1pbiAwXG4gICAqIG1heCAxXG4gICAqL1xuICByZWFkb25seSB0b3BQOiBudW1iZXI7XG4gIC8qKlxuICAgKiBXaGlsZSBnZW5lcmF0aW5nIGEgcmVzcG9uc2UsIHRoZSBtb2RlbCBkZXRlcm1pbmVzIHRoZSBwcm9iYWJpbGl0eSBvZiB0aGVcbiAgICogZm9sbG93aW5nIHRva2VuIGF0IGVhY2ggcG9pbnQgb2YgZ2VuZXJhdGlvbi4gVGhlIHZhbHVlIHRoYXQgeW91IHNldCBmb3JcbiAgICogdG9wSyBpcyB0aGUgbnVtYmVyIG9mIG1vc3QtbGlrZWx5IGNhbmRpZGF0ZXMgZnJvbSB3aGljaCB0aGUgbW9kZWwgY2hvb3Nlc1xuICAgKiB0aGUgbmV4dCB0b2tlbiBpbiB0aGUgc2VxdWVuY2UuIEZvciBleGFtcGxlLCBpZiB5b3Ugc2V0IHRvcEsgdG8gNTAsIHRoZVxuICAgKiBtb2RlbCBzZWxlY3RzIHRoZSBuZXh0IHRva2VuIGZyb20gYW1vbmcgdGhlIHRvcCA1MCBtb3N0IGxpa2VseSBjaG9pY2VzLlxuICAgKlxuICAgKiBJbnRlZ2VyXG4gICAqXG4gICAqIG1pbiAwXG4gICAqIG1heCA1MDBcbiAgICovXG4gIHJlYWRvbmx5IHRvcEs6IG51bWJlcjtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBzdG9wIHNlcXVlbmNlcy4gQSBzdG9wIHNlcXVlbmNlIGlzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyB0aGF0XG4gICAqIGNhdXNlcyB0aGUgbW9kZWwgdG8gc3RvcCBnZW5lcmF0aW5nIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogbGVuZ3RoIDAtNFxuICAgKi9cbiAgcmVhZG9ubHkgc3RvcFNlcXVlbmNlczogc3RyaW5nW107XG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlIGluIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogSW50ZWdlclxuICAgKlxuICAgKiBtaW4gMFxuICAgKiBtYXggNDA5NlxuICAgKi9cbiAgcmVhZG9ubHkgbWF4aW11bUxlbmd0aDogbnVtYmVyO1xufVxuXG4vKipcbiAqIENvbnRhaW5zIGNvbmZpZ3VyYXRpb25zIHRvIG92ZXJyaWRlIGEgcHJvbXB0IHRlbXBsYXRlIGluIG9uZSBwYXJ0IG9mIGFuIGFnZW50IHNlcXVlbmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb21wdENvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogVGhlIHN0ZXAgaW4gdGhlIGFnZW50IHNlcXVlbmNlIHRoYXQgdGhpcyBwcm9tcHQgY29uZmlndXJhdGlvbiBhcHBsaWVzIHRvLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvbXB0VHlwZTogUHJvbXB0VHlwZTtcbiAgLyoqXG4gICAqIENvbnRhaW5zIGluZmVyZW5jZSBwYXJhbWV0ZXJzIHRvIHVzZSB3aGVuIHRoZSBhZ2VudCBpbnZva2VzIGEgZm91bmRhdGlvblxuICAgKiBtb2RlbCBpbiB0aGUgcGFydCBvZiB0aGUgYWdlbnQgc2VxdWVuY2UgZGVmaW5lZCBieSB0aGUgcHJvbXB0VHlwZS5cbiAgICovXG4gIHJlYWRvbmx5IGluZmVyZW5jZUNvbmZpZ3VyYXRpb246IEluZmVyZW5jZUNvbmZpZ3VyYXRpb247XG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBwcm9tcHQgdGVtcGxhdGUgd2l0aCB3aGljaCB0byByZXBsYWNlIHRoZSBkZWZhdWx0IHByb21wdCB0ZW1wbGF0ZS5cbiAgICpcbiAgICogbGVuZ3RoIDAtMTAwMDAwXG4gICAqL1xuICByZWFkb25seSBiYXNlUHJvbXB0VGVtcGxhdGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHBhcnNlciBMYW1iZGEgZnVuY3Rpb24gd2hlblxuICAgKiBwYXJzaW5nIHRoZSByYXcgZm91bmRhdGlvbiBtb2RlbCBvdXRwdXQgaW4gdGhlIHBhcnQgb2YgdGhlIGFnZW50IHNlcXVlbmNlXG4gICAqIGRlZmluZWQgYnkgdGhlIHByb21wdFR5cGUuIElmIHlvdSBzZXQgdGhlIGZpZWxkIGFzIE9WRVJSSURFTiwgdGhlXG4gICAqIG92ZXJyaWRlTGFtYmRhIGZpZWxkIGluIHRoZSBQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24gbXVzdCBiZSBzcGVjaWZpZWRcbiAgICogd2l0aCB0aGUgQVJOIG9mIGEgTGFtYmRhIGZ1bmN0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2VyTW9kZT86IFBhcnNlck1vZGU7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgd2hldGhlciB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBwcm9tcHQgdGVtcGxhdGUgZm9yIHRoaXNcbiAgICogcHJvbXB0VHlwZS4gU2V0IHRoaXMgdmFsdWUgdG8gT1ZFUlJJRERFTiB0byB1c2UgdGhlIHByb21wdCB0aGF0IHlvdVxuICAgKiBwcm92aWRlIGluIHRoZSBiYXNlUHJvbXB0VGVtcGxhdGUuIElmIHlvdSBsZWF2ZSBpdCBhcyBERUZBVUxULCB0aGUgYWdlbnRcbiAgICogdXNlcyBhIGRlZmF1bHQgcHJvbXB0IHRlbXBsYXRlLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvbXB0Q3JlYXRpb25Nb2RlOiBQcm9tcHRDcmVhdGlvbk1vZGU7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgd2hldGhlciB0byBhbGxvdyB0aGUgYWdlbnQgdG8gY2Fycnkgb3V0IHRoZSBzdGVwIHNwZWNpZmllZCBpblxuICAgKiB0aGUgcHJvbXB0VHlwZS4gSWYgeW91IHNldCB0aGlzIHZhbHVlIHRvIERJU0FCTEVELCB0aGUgYWdlbnQgc2tpcHMgdGhhdFxuICAgKiBzdGVwLiBUaGUgZGVmYXVsdCBzdGF0ZSBmb3IgZWFjaCBwcm9tcHRUeXBlIGlzIGFzIGZvbGxvd3MuXG4gICAqXG4gICAqICAgICBQUkVfUFJPQ0VTU0lORyDigJMgRU5BQkxFRFxuICAgKiAgICAgT1JDSEVTVFJBVElPTiDigJMgRU5BQkxFRFxuICAgKiAgICAgS05PV0xFREdFX0JBU0VfUkVTUE9OU0VfR0VORVJBVElPTiDigJMgRU5BQkxFRFxuICAgKiAgICAgUE9TVF9QUk9DRVNTSU5HIOKAkyBESVNBQkxFRFxuICAgKi9cbiAgcmVhZG9ubHkgcHJvbXB0U3RhdGU6IFByb21wdFN0YXRlO1xufVxuXG4vKipcbiAqIENvbnRhaW5zIGNvbmZpZ3VyYXRpb25zIHRvIG92ZXJyaWRlIHByb21wdHMgaW4gZGlmZmVyZW50IHBhcnRzIG9mIGFuIGFnZW50IHNlcXVlbmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBDb250YWlucyBjb25maWd1cmF0aW9ucyB0byBvdmVycmlkZSBhIHByb21wdCB0ZW1wbGF0ZSBpbiBvbmUgcGFydCBvZiBhbiBhZ2VudCBzZXF1ZW5jZS5cbiAgICovXG4gIHJlYWRvbmx5IHByb21wdENvbmZpZ3VyYXRpb25zOiBQcm9tcHRDb25maWd1cmF0aW9uW107XG4gIC8qKlxuICAgKiBUaGUgQVJOIG9mIHRoZSBMYW1iZGEgZnVuY3Rpb24gdG8gdXNlIHdoZW4gcGFyc2luZyB0aGUgcmF3IGZvdW5kYXRpb25cbiAgICogbW9kZWwgb3V0cHV0IGluIHBhcnRzIG9mIHRoZSBhZ2VudCBzZXF1ZW5jZS4gSWYgeW91IHNwZWNpZnkgdGhpcyBmaWVsZCxcbiAgICogYXQgbGVhc3Qgb25lIG9mIHRoZSBwcm9tcHRDb25maWd1cmF0aW9ucyBtdXN0IGNvbnRhaW4gYSBwYXJzZXJNb2RlIHZhbHVlXG4gICAqIHRoYXQgaXMgc2V0IHRvIE9WRVJSSURERU4uXG4gICAqL1xuICByZWFkb25seSBvdmVycmlkZUxhbWJkYT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIEJlZHJvY2sgQWdlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQmVkcm9jayB0ZXh0IGZvdW5kYXRpb24gbW9kZWwgZm9yIHRoZSBhZ2VudCB0byB1c2UuXG4gICAqL1xuICByZWFkb25seSBmb3VuZGF0aW9uTW9kZWw6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWw7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgYWdlbnQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gQSBuYW1lIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV4aXN0aW5nIElBTSBSb2xlIGZvciB0aGUgYWdlbnQgd2l0aCBhIHRydXN0IHBvbGljeSB0aGF0XG4gICAqIGFsbG93cyB0aGUgQmVkcm9jayBzZXJ2aWNlIHRvIGFzc3VtZSB0aGUgcm9sZS5cbiAgICovXG4gIHJlYWRvbmx5IGV4aXN0aW5nUm9sZT86IGlhbS5Sb2xlO1xuXG4gIC8qKlxuICAgKiBBIG5hcnJhdGl2ZSBpbnN0cnVjdGlvbiB0byBwcm92aWRlIHRoZSBhZ2VudCBhcyBjb250ZXh0LlxuICAgKi9cbiAgcmVhZG9ubHkgaW5zdHJ1Y3Rpb246IHN0cmluZztcbiAgLyoqXG4gICAqIEEgZGVzY3JpcHRpb24gb2YgdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGRlc2NyaXB0aW9uIGlzIHByb3ZpZGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBLbm93bGVkZ2UgQmFzZXMgdG8gbWFrZSBhdmFpbGFibGUgdG8gdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGtub3dsZWRnZSBiYXNlIGlzIHVzZWQuXG4gICAqL1xuICByZWFkb25seSBrbm93bGVkZ2VCYXNlcz86IEtub3dsZWRnZUJhc2VbXTtcbiAgLyoqXG4gICAqIEFnZW50QWN0aW9uR3JvdXAgdG8gbWFrZSBhdmFpbGFibGUgdG8gdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIEFnZW50QWN0aW9uR3JvdXAgIGlzIHVzZWQuXG4gICAqL1xuICByZWFkb25seSBhY3Rpb25Hcm91cHM/OiBBZ2VudEFjdGlvbkdyb3VwW107XG5cbiAgLyoqIEd1YXJkcmFpbCBjb25maWd1cmF0aW9uXG4gICAqXG4gICAqIFdhcm5pbmc6IElmIHlvdSBwcm92aWRlIGEgZ3VhcmRyYWlsIGNvbmZpZ3VyYXRpb24gdGhyb3VnaCB0aGUgY29uc3RydWN0b3IsXG4gICAqIHlvdSB3aWxsIG5lZWQgdG8gcHJvdmlkZSB0aGUgY29ycmVjdCBwZXJtaXNzaW9ucyBmb3IgeW91ciBhZ2VudCB0byBhY2Nlc3NcbiAgICogdGhlIGd1YXJkcmFpbHMuIElmIHlvdSB3YW50IHRoZSBwZXJtaXNzaW9ucyB0byBiZSBjb25maWd1cmVkIG9uIHlvdXIgYmVoYWxmLFxuICAgKiB1c2UgdGhlIGFkZEd1YXJkcmFpbCBtZXRob2QuXG4gICAqIEBkZWZhdWx0IC0gTm8gZ3VhcmRyYWlscyBhc3NvY2lhdGVkIHRvIHRoZSBhZ2VudC5cbiAgKi9cbiAgcmVhZG9ubHkgZ3VhcmRyYWlsQ29uZmlndXJhdGlvbj86IEd1YXJkcmFpbENvbmZpZ3VyYXRpb247XG4gIC8qKlxuICAgKiBTZWxlY3Qgd2hldGhlciB0aGUgYWdlbnQgY2FuIHByb21wdCBhZGRpdGlvbmFsXG4gICAqIGluZm9ybWF0aW9uIGZyb20gdGhlIHVzZXIgd2hlbiBpdCBkb2VzIG5vdCBoYXZlXG4gICAqIGVub3VnaCBpbmZvcm1hdGlvbiB0byByZXNwb25kIHRvIGFuIHV0dGVyYW5jZVxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEZhbHNlXG4gICAqL1xuICByZWFkb25seSBlbmFibGVVc2VySW5wdXQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBIb3cgbG9uZyBzZXNzaW9ucyBzaG91bGQgYmUga2VwdCBvcGVuIGZvciB0aGUgYWdlbnQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMSBob3VyXG4gICAqL1xuICByZWFkb25seSBpZGxlU2Vzc2lvblRUTD86IGNkay5EdXJhdGlvbjtcbiAgLyoqXG4gICAqIEtNUyBlbmNyeXB0aW9uIGtleSB0byB1c2UgZm9yIHRoZSBhZ2VudC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBBbiBBV1MgbWFuYWdlZCBrZXkgaXMgdXNlZC5cbiAgICovXG4gIHJlYWRvbmx5IGVuY3J5cHRpb25LZXk/OiBrbXMuSUtleTtcbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBmb3IgdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIG92ZXJyaWRlcyBhcmUgcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24/OiBQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb247XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBhbGlhcyBmb3IgdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGFsaWFzIGlzIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSBhbGlhc05hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHByZXBhcmUgdGhlIGFnZW50IGZvciB1c2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHNob3VsZFByZXBhcmVBZ2VudD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIE9QVElPTkFMOiBUYWcgKEtFWS1WQUxVRSkgYmVkcm9jayBhZ2VudCByZXNvdXJjZVxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSB0YWdzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHRvIGFkZCBhbiBBbGlhcyB0byBhbiBBZ2VudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZEFnZW50QWxpYXNQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBmb3IgdGhlIGFnZW50IGFsaWFzLlxuICAgKi9cbiAgcmVhZG9ubHkgYWxpYXNOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgYWdlbnQgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGFnZW50IGFsaWFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIENyZWF0ZXMgYSBuZXcgdmVyc2lvbiBvZiB0aGUgYWdlbnQuXG4gICAqL1xuICByZWFkb25seSBhZ2VudFZlcnNpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIGZvciB0aGUgYWdlbnQgYWxpYXMuXG4gICAqXG4gICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZXBsb3kgYSBCZWRyb2NrIEFnZW50LlxuICovXG5leHBvcnQgY2xhc3MgQWdlbnQgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFnZW50LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBJQU0gcm9sZSBmb3IgdGhlIGFnZW50LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHJvbGU6IGlhbS5Sb2xlO1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBhZ2VudC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhZ2VudElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiBBZ2VudFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFnZW50SW5zdGFuY2U6IGJlZHJvY2suQ2ZuQWdlbnQ7XG4gIC8qKlxuICAgKiBUaGUgQVJOIG9mIHRoZSBhZ2VudC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhZ2VudEFybjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBhZ2VudCBhbGlhcy5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhbGlhc0lkPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUgYWdlbnQgYWxpYXMuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYWxpYXNBcm4/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBmb3IgdGhlIGFnZW50IGFsaWFzLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFsaWFzTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIGZvciB0aGUgYWdlbnRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhZ2VudHZlcnNpb246IHN0cmluZztcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB2YWx1ZXMgdG8gaW5kaWNhdGUgaWYgUHJlcGFyZUFnZW50IG9yIGFuIEFsaWFzIG5lZWRzIHRvIGJlIHVwZGF0ZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIHJlc291cmNlVXBkYXRlczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQSBsaXN0IG9mIGFjdGlvbiBncm91cHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhZ2VudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHVibGljIGFjdGlvbkdyb3VwczogYmVkcm9jay5DZm5BZ2VudC5BZ2VudEFjdGlvbkdyb3VwUHJvcGVydHlbXT1bXTtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBLbm93bGVkZ2VCYXNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFnZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGtub3dsZWRnZSBiYXNlIGlzIHVzZWQuXG4gICAqL1xuICBwdWJsaWMga25vd2xlZGdlQmFzZXM6IGJlZHJvY2suQ2ZuQWdlbnQuQWdlbnRLbm93bGVkZ2VCYXNlUHJvcGVydHkgW109W107XG5cblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQWdlbnRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgdmFsaWRhdGVQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24ocHJvcHMucHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uKTtcblxuICAgIHZhbGlkYXRlTW9kZWwocHJvcHMuZm91bmRhdGlvbk1vZGVsKTtcblxuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWUgPz8gZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMihcbiAgICAgIHRoaXMsXG4gICAgICAnYmVkcm9jay1hZ2VudCcsXG4gICAgICB7IG1heExlbmd0aDogMzIsIGxvd2VyOiB0cnVlLCBzZXBhcmF0b3I6ICctJyB9KTtcblxuICAgIGlmIChwcm9wcy5leGlzdGluZ1JvbGUpIHtcbiAgICAgIHRoaXMucm9sZSA9IHByb3BzLmV4aXN0aW5nUm9sZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMsICdSb2xlJywge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnYmVkcm9jay5hbWF6b25hd3MuY29tJyksXG4gICAgICAgIHJvbGVOYW1lOiBnZW5lcmF0ZVBoeXNpY2FsTmFtZVYyKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgJ0FtYXpvbkJlZHJvY2tFeGVjdXRpb25Sb2xlRm9yQWdlbnRzXycsXG4gICAgICAgICAgeyBtYXhMZW5ndGg6IDY0LCBsb3dlcjogZmFsc2UgfSksXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yb2xlLmFzc3VtZVJvbGVQb2xpY3khLmFkZFN0YXRlbWVudHMoXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbJ3N0czpBc3N1bWVSb2xlJ10sXG4gICAgICAgICAgcHJpbmNpcGFsczogW25ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnYmVkcm9jay5hbWF6b25hd3MuY29tJyldLFxuICAgICAgICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgIFN0cmluZ0VxdWFsczoge1xuICAgICAgICAgICAgICAnYXdzOlNvdXJjZUFjY291bnQnOiBjZGsuU3RhY2sub2YodGhpcykuYWNjb3VudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBcm5MaWtlOiB7XG4gICAgICAgICAgICAgICdhd3M6U291cmNlQXJuJzogY2RrLlN0YWNrLm9mKHRoaXMpLmZvcm1hdEFybih7XG4gICAgICAgICAgICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgICAgICAgICAgIHJlc291cmNlOiAnYWdlbnQnLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTmFtZTogJyonLFxuICAgICAgICAgICAgICAgIGFybkZvcm1hdDogY2RrLkFybkZvcm1hdC5TTEFTSF9SRVNPVVJDRV9OQU1FLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgICBuZXcgaWFtLlBvbGljeSh0aGlzLCAnQWdlbnRGTVBvbGljeScsIHtcbiAgICAgICAgcm9sZXM6IFt0aGlzLnJvbGVdLFxuICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgYWN0aW9uczogWydiZWRyb2NrOkludm9rZU1vZGVsJ10sXG4gICAgICAgICAgICByZXNvdXJjZXM6IFtwcm9wcy5mb3VuZGF0aW9uTW9kZWwuYXNBcm4odGhpcyldLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWdlbnQgPSBuZXcgYmVkcm9jay5DZm5BZ2VudCh0aGlzLCAnQWdlbnQnLCB7XG5cbiAgICAgIGFnZW50TmFtZTogdGhpcy5uYW1lLFxuXG4gICAgICBmb3VuZGF0aW9uTW9kZWw6IFN0cmluZyhwcm9wcy5mb3VuZGF0aW9uTW9kZWwpLFxuICAgICAgaW5zdHJ1Y3Rpb246IHByb3BzLmluc3RydWN0aW9uLFxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgaWRsZVNlc3Npb25UdGxJblNlY29uZHM6IHByb3BzLmlkbGVTZXNzaW9uVFRMPy50b1NlY29uZHMoKSxcbiAgICAgIGFnZW50UmVzb3VyY2VSb2xlQXJuOiB0aGlzLnJvbGUucm9sZUFybixcbiAgICAgIGN1c3RvbWVyRW5jcnlwdGlvbktleUFybjogcHJvcHMuZW5jcnlwdGlvbktleT8ua2V5QXJuLFxuICAgICAgdGFnczogcHJvcHMudGFncyxcbiAgICAgIHByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbjogcHJvcHMucHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uLFxuICAgICAgYXV0b1ByZXBhcmU6IHByb3BzLnNob3VsZFByZXBhcmVBZ2VudCxcbiAgICAgIGd1YXJkcmFpbENvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgZ3VhcmRyYWlsSWRlbnRpZmllcjogcHJvcHMuZ3VhcmRyYWlsQ29uZmlndXJhdGlvbj8uZ3VhcmRyYWlsSWQsXG4gICAgICAgIGd1YXJkcmFpbFZlcnNpb246IHByb3BzLmd1YXJkcmFpbENvbmZpZ3VyYXRpb24/Lmd1YXJkcmFpbFZlcnNpb24sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZ2VudEluc3RhbmNlID0gYWdlbnQ7XG4gICAgdGhpcy5hZ2VudElkID0gYWdlbnQuYXR0ckFnZW50SWQ7XG4gICAgdGhpcy5hZ2VudEFybiA9IGFnZW50LmF0dHJBZ2VudEFybjtcbiAgICB0aGlzLmFnZW50dmVyc2lvbiA9IGFnZW50LmF0dHJBZ2VudFZlcnNpb247XG5cbiAgICB0aGlzLl9hZGRBbGlhc0RlcGVuZGVuY3koYWdlbnQuYXR0clVwZGF0ZWRBdCk7XG5cbiAgICBpZiAocHJvcHMuYWxpYXNOYW1lKSB7XG4gICAgICBjb25zdCBhbGlhcyA9IHRoaXMuYWRkQWxpYXMoe1xuICAgICAgICBhbGlhc05hbWU6IHByb3BzLmFsaWFzTmFtZSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hbGlhc0lkID0gYWxpYXMuYWxpYXNJZDtcbiAgICAgIHRoaXMuYWxpYXNBcm4gPSBhbGlhcy5hbGlhc0FybjtcbiAgICAgIHRoaXMuYWxpYXNOYW1lID0gYWxpYXMuYWxpYXNOYW1lO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5rbm93bGVkZ2VCYXNlcykge1xuICAgICAgdGhpcy5hZGRLbm93bGVkZ2VCYXNlcyhwcm9wcy5rbm93bGVkZ2VCYXNlcyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFjdGlvbkdyb3Vwcykge1xuICAgICAgdGhpcy5hZGRBY3Rpb25Hcm91cHMocHJvcHMuYWN0aW9uR3JvdXBzKTtcbiAgICB9XG4gICAgLy8gVG8gYWxsb3cgeW91ciBhZ2VudCB0byByZXF1ZXN0IHRoZSB1c2VyIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gICAgLy8gd2hlbiB0cnlpbmcgdG8gY29tcGxldGUgYSB0YXNrICwgYWRkIHRoaXMgYWN0aW9uIGdyb3VwXG4gICAgaWYgKHByb3BzLmVuYWJsZVVzZXJJbnB1dCkge1xuICAgICAgdGhpcy5hZGRBY3Rpb25Hcm91cChuZXcgQWdlbnRBY3Rpb25Hcm91cCh0aGlzLCAndXNlcklucHV0RW5hYmxlZEFjdGlvbkdyb3VwJywge1xuICAgICAgICBhY3Rpb25Hcm91cE5hbWU6ICdVc2VySW5wdXRBY3Rpb24nLFxuICAgICAgICBwYXJlbnRBY3Rpb25Hcm91cFNpZ25hdHVyZTogJ0FNQVpPTi5Vc2VySW5wdXQnLFxuICAgICAgICBhY3Rpb25Hcm91cFN0YXRlOiAnRU5BQkxFRCcsXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQWRkIGFuIGFsaWFzIHRvIHRoZSBhZ2VudC5cbiAgICovXG4gIHB1YmxpYyBhZGRBbGlhcyhwcm9wczogQWRkQWdlbnRBbGlhc1Byb3BzKTogQWdlbnRBbGlhcyB7XG4gICAgY29uc3QgYWxpYXMgPSBuZXcgQWdlbnRBbGlhcyh0aGlzLCBgQWdlbnRBbGlhcy0ke3Byb3BzLmFsaWFzTmFtZX1gLCB7XG4gICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWQsXG4gICAgICBhZ2VudFZlcnNpb246IHByb3BzLmFnZW50VmVyc2lvbixcbiAgICAgIHJlc291cmNlVXBkYXRlczogY2RrLkxhenkubGlzdCh7IHByb2R1Y2U6ICgpID0+IHRoaXMucmVzb3VyY2VVcGRhdGVzIH0pLFxuICAgICAgYWxpYXNOYW1lOiBwcm9wcy5hbGlhc05hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgfSk7XG4gICAgcmV0dXJuIGFsaWFzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBrbm93bGVkZ2UgYmFzZXMgdG8gdGhlIGFnZW50LlxuICAgKi9cbiAgcHVibGljIGFkZEtub3dsZWRnZUJhc2VzKGtub3dsZWRnZUJhc2VzOiBLbm93bGVkZ2VCYXNlIFtdKSB7XG4gICAgZm9yIChjb25zdCBrYiBvZiBrbm93bGVkZ2VCYXNlcykge1xuICAgICAgdGhpcy5hZGRLbm93bGVkZ2VCYXNlKGtiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGtub3dsZWRnZSBiYXNlIHRvIHRoZSBhZ2VudC5cbiAgICovXG4gIHB1YmxpYyBhZGRLbm93bGVkZ2VCYXNlKGtub3dsZWRnZUJhc2U6IEtub3dsZWRnZUJhc2UpIHtcbiAgICBpZiAoIWtub3dsZWRnZUJhc2UuaW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWdlbnQgS25vd2xlZGdlIEJhc2VzIHJlcXVpcmUgaW5zdHJ1Y3Rpb25zLicpO1xuICAgIH1cbiAgICBuZXcgaWFtLlBvbGljeSh0aGlzLCBgQWdlbnRLQlBvbGljeS0ke2tub3dsZWRnZUJhc2UubmFtZX1gLCB7XG4gICAgICByb2xlczogW3RoaXMucm9sZV0sXG4gICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAnYmVkcm9jazpVcGRhdGVLbm93bGVkZ2VCYXNlJyxcbiAgICAgICAgICAgICdiZWRyb2NrOlJldHJpZXZlJyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlc291cmNlczogW2tub3dsZWRnZUJhc2Uua25vd2xlZGdlQmFzZUFybl0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcbiAgICBjb25zdCBhZ2VudEtub3dsZWRnZUJhc2VQcm9wZXJ0eTogYmVkcm9jay5DZm5BZ2VudC5BZ2VudEtub3dsZWRnZUJhc2VQcm9wZXJ0eSA9IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBrbm93bGVkZ2VCYXNlLmluc3RydWN0aW9uLCAvLyBrbm93biBpc3N1ZTogd3JvbmcgcGFyYW1ldGVyIG1hcHBpbmcgaW4gQ2ZuLiBXb3JrYXJvdW5kOiBwYXNzIGluc3RydWN0aW9uIHRocm91Z2ggZGVzY3JpcHRpb25cbiAgICAgIGtub3dsZWRnZUJhc2VJZDoga25vd2xlZGdlQmFzZS5rbm93bGVkZ2VCYXNlSWQsXG4gICAgICBrbm93bGVkZ2VCYXNlU3RhdGU6IGtub3dsZWRnZUJhc2Uua25vd2xlZGdlQmFzZVN0YXRlLFxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMuYWdlbnRJbnN0YW5jZS5rbm93bGVkZ2VCYXNlcyB8fCAhQXJyYXkuaXNBcnJheSh0aGlzLmFnZW50SW5zdGFuY2Uua25vd2xlZGdlQmFzZXMpKSB7XG4gICAgICB0aGlzLmFnZW50SW5zdGFuY2Uua25vd2xlZGdlQmFzZXMgPSBbYWdlbnRLbm93bGVkZ2VCYXNlUHJvcGVydHldO1xuICAgIH0gZWxzZSB7XG4gICAgICAodGhpcy5hZ2VudEluc3RhbmNlLmtub3dsZWRnZUJhc2VzIGFzIGFueSkucHVzaChhZ2VudEtub3dsZWRnZUJhc2VQcm9wZXJ0eSk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQWRkIGFjdGlvbiBncm91cCB0byB0aGUgYWdlbnQuXG4gICAqL1xuICBwdWJsaWMgYWRkQWN0aW9uR3JvdXAoYWN0aW9uR3JvdXA6IEFnZW50QWN0aW9uR3JvdXApIHtcbiAgICBhY3Rpb25Hcm91cC5hY3Rpb25Hcm91cEV4ZWN1dG9yPy5sYW1iZGE/LmFkZFBlcm1pc3Npb24oJ0FnZW50TGFtYmRhSW52b2NhdGlvblBvbGljeScsIHtcbiAgICAgIHByaW5jaXBhbDogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdiZWRyb2NrLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgIHNvdXJjZUFybjogdGhpcy5hZ2VudEFybixcbiAgICAgIHNvdXJjZUFjY291bnQ6IGNkay5TdGFjay5vZih0aGlzKS5hY2NvdW50LFxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLmFnZW50SW5zdGFuY2UuYWN0aW9uR3JvdXBzIHx8ICFBcnJheS5pc0FycmF5KHRoaXMuYWdlbnRJbnN0YW5jZS5hY3Rpb25Hcm91cHMpKSB7XG4gICAgICB0aGlzLmFnZW50SW5zdGFuY2UuYWN0aW9uR3JvdXBzID0gW2FjdGlvbkdyb3VwLmFjdGlvbkdyb3VwUHJvcGVydHldO1xuICAgIH0gZWxzZSB7XG4gICAgICAodGhpcy5hZ2VudEluc3RhbmNlLmFjdGlvbkdyb3VwcyBhcyBhbnkpLnB1c2goYWN0aW9uR3JvdXAuYWN0aW9uR3JvdXBQcm9wZXJ0eSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhY3Rpb24gZ3JvdXBzIHRvIHRoZSBhZ2VudC5cbiAgICovXG4gIHB1YmxpYyBhZGRBY3Rpb25Hcm91cHMoYWN0aW9uR3JvdXBzOiBBZ2VudEFjdGlvbkdyb3VwW10pIHtcbiAgICBmb3IgKGNvbnN0IGFjdGlvbkdyb3VwIG9mIGFjdGlvbkdyb3Vwcykge1xuICAgICAgdGhpcy5hZGRBY3Rpb25Hcm91cChhY3Rpb25Hcm91cCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBndWFyZHJhaWwgdG8gdGhlIGFnZW50LlxuICAgKi9cbiAgcHVibGljIGFkZEd1YXJkcmFpbChndWFyZHJhaWw6IEd1YXJkcmFpbCkge1xuICAgIG5ldyBpYW0uUG9saWN5KHRoaXMsIGBBZ2VudEd1YXJkcmFpbFBvbGljeS0ke2d1YXJkcmFpbC5uYW1lfWAsIHtcbiAgICAgIHJvbGVzOiBbdGhpcy5yb2xlXSxcbiAgICAgIHN0YXRlbWVudHM6IFtcbiAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICdiZWRyb2NrOkFwcGx5R3VhcmRyYWlsJyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlc291cmNlczogW2Bhcm46JHtjZGsuQXdzLlBBUlRJVElPTn06YmVkcm9jazoke2Nkay5Bd3MuUkVHSU9OfToke2Nkay5Bd3MuQUNDT1VOVF9JRH06Z3VhcmRyYWlsLyR7Z3VhcmRyYWlsLmd1YXJkcmFpbElkfWBdLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICdrbXM6RGVjcnlwdCcsXG4gICAgICAgICAgXSxcbiAgICAgICAgICByZXNvdXJjZXM6IFtndWFyZHJhaWwua21zS2V5QXJuXSxcbiAgICAgICAgICBjb25kaXRpb25zOiB7XG4gICAgICAgICAgICBTdHJpbmdFcXVhbHM6IHtcbiAgICAgICAgICAgICAgJ2F3czpSZXNvdXJjZUFjY291bnQnOiBjZGsuQXdzLkFDQ09VTlRfSUQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHRoaXMuYWdlbnRJbnN0YW5jZS5ndWFyZHJhaWxDb25maWd1cmF0aW9uID0ge1xuICAgICAgZ3VhcmRyYWlsSWRlbnRpZmllcjogZ3VhcmRyYWlsLmd1YXJkcmFpbElkLFxuICAgICAgZ3VhcmRyYWlsVmVyc2lvbjogZ3VhcmRyYWlsLmd1YXJkcmFpbFZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGRlcGVuZGVuY3kgZm9yIGFsaWFzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB1cGRhdGVkQXQgLSBUaGUgdXBkYXRlZEF0IG9mIHRoZSByZXNvdXJjZSB0aGF0IHdpbGwgYmUgcmVnaXN0ZXJlZCBhcyBhIGRlcGVuZGVuY3kuXG4gICAqXG4gICAqIEBpbnRlcm5hbCBUaGlzIGlzIGFuIGludGVybmFsIGNvcmUgZnVuY3Rpb24gYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5LlxuICAgKi9cbiAgcHVibGljIF9hZGRBbGlhc0RlcGVuZGVuY3kodXBkYXRlZEF0OiBzdHJpbmcpIHtcbiAgICBpZiAodXBkYXRlZEF0KSB7XG4gICAgICB0aGlzLnJlc291cmNlVXBkYXRlcy5wdXNoKHVwZGF0ZWRBdCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGUgdGhhdCBCZWRyb2NrIEFnZW50cyBjYW4gdXNlIHRoZSBzZWxlY3RlZCBtb2RlbC5cbiAqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVNb2RlbChmb3VuZGF0aW9uTW9kZWw6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwpIHtcbiAgaWYgKCFmb3VuZGF0aW9uTW9kZWwuc3VwcG9ydHNBZ2VudHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBtb2RlbCAke2ZvdW5kYXRpb25Nb2RlbH0gaXMgbm90IHN1cHBvcnRlZCBieSBCZWRyb2NrIEFnZW50cy5gKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHRoZSBpbmZlcmVuY2VDb25maWd1cmF0aW9uIG9mIGEgcHJvbXB0IG92ZXJyaWRlLlxuICpcbiAqIEBpbnRlcm5hbCBUaGlzIGlzIGFuIGludGVybmFsIGNvcmUgZnVuY3Rpb24gYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbmZlcmVuY2VDb25maWd1cmF0aW9uKGluZmVyZW5jZUNvbmZpZ3VyYXRpb246IEluZmVyZW5jZUNvbmZpZ3VyYXRpb24pIHtcbiAgaWYgKGluZmVyZW5jZUNvbmZpZ3VyYXRpb24udG9wSyA8IDAgfHwgaW5mZXJlbmNlQ29uZmlndXJhdGlvbi50b3BLID4gNTAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b3BLIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA1MDAnKTtcbiAgfVxuXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihpbmZlcmVuY2VDb25maWd1cmF0aW9uLnRvcEspKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b3BLIG11c3QgYmUgYW4gaW50ZWdlcicpO1xuICB9XG5cbiAgaWYgKGluZmVyZW5jZUNvbmZpZ3VyYXRpb24uc3RvcFNlcXVlbmNlcy5sZW5ndGggPiA0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzdG9wU2VxdWVuY2VzIGNhbm5vdCBjb250YWluIG1vcmUgdGhhbiA0IGVsZW1lbnRzJyk7XG4gIH1cblxuICBpZiAoaW5mZXJlbmNlQ29uZmlndXJhdGlvbi5tYXhpbXVtTGVuZ3RoIDwgMCB8fCBpbmZlcmVuY2VDb25maWd1cmF0aW9uLm1heGltdW1MZW5ndGggPiA0MDk2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXhpbXVtTGVuZ3RoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA0MDk2Jyk7XG4gIH1cblxuICBpZiAoIU51bWJlci5pc0ludGVnZXIoaW5mZXJlbmNlQ29uZmlndXJhdGlvbi5tYXhpbXVtTGVuZ3RoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWF4aW11bUxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXInKTtcbiAgfVxuXG4gIGlmIChpbmZlcmVuY2VDb25maWd1cmF0aW9uLnRvcFAgPCAwIHx8IGluZmVyZW5jZUNvbmZpZ3VyYXRpb24udG9wUCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvcFAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgfVxuXG4gIGlmIChpbmZlcmVuY2VDb25maWd1cmF0aW9uLnRlbXBlcmF0dXJlIDwgMCB8fCBpbmZlcmVuY2VDb25maWd1cmF0aW9uLnRlbXBlcmF0dXJlID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndGVtcGVyYXR1cmUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHRoZSBwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24uXG4gKlxuICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbihwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb246IFByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbnx1bmRlZmluZWQpIHtcbiAgaWYgKCFwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoXG4gICAgcHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uLm92ZXJyaWRlTGFtYmRhICYmXG4gICAgcHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uLnByb21wdENvbmZpZ3VyYXRpb25zLnNvbWUoXG4gICAgICBwYyA9PiBwYy5wYXJzZXJNb2RlICE9PSBQYXJzZXJNb2RlLk9WRVJSSURERU4sXG4gICAgKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignb3ZlcnJpZGVMYW1iZGEgY2FuIG9ubHkgYmUgdXNlZCBpZiBhbGwgcHJvbXB0Q29uZmlndXJhdGlvbnMgaGF2ZSBhIHBhcnNlck1vZGUgdmFsdWUgb2YgT1ZFUlJJRERFTicpO1xuICB9XG5cbiAgaWYgKFxuICAgICFwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24ub3ZlcnJpZGVMYW1iZGEgJiZcbiAgICBwcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24ucHJvbXB0Q29uZmlndXJhdGlvbnMuc29tZShcbiAgICAgIHBjID0+IHBjLnBhcnNlck1vZGUgPT09IFBhcnNlck1vZGUuT1ZFUlJJRERFTixcbiAgICApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdCBsZWFzdCBvbmUgcHJvbXB0Q29uZmlndXJhdGlvbiBoYXMgYSBwYXJzZXJNb2RlIHZhbHVlIG9mIE9WRVJSSURERU4sIGJ1dCBubyBvdmVycmlkZUxhbWJkYSBpcyBzcGVjaWZpZWQnKTtcbiAgfVxuXG4gIC8vIGNoZWNrIGluZmVyZW5jZUNvbmZpZ3VyYXRpb24gbnVtYmVyIHR5cGVzXG4gIE9iamVjdC52YWx1ZXMocHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uLnByb21wdENvbmZpZ3VyYXRpb25zKS5mb3JFYWNoKHBjID0+IHtcbiAgICB2YWxpZGF0ZUluZmVyZW5jZUNvbmZpZ3VyYXRpb24ocGMuaW5mZXJlbmNlQ29uZmlndXJhdGlvbik7XG4gIH0pO1xuXG4gIHJldHVybjtcbn1cblxuIl19