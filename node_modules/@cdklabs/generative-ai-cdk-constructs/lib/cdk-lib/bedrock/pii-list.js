"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SensitiveInformationPolicyConfig = exports.PiiEntitiesConfigAction = exports.UKSpecific = exports.CanadaSpecific = exports.USASpecific = exports.InformationTechnology = exports.Finance = exports.General = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
// Enum for Personally Identifiable Information (PersonalIdentifiableInformation) types
var General;
(function (General) {
    General["ADDRESS"] = "ADDRESS";
    General["AGE"] = "AGE";
    General["DRIVER_ID"] = "DRIVER_ID";
    General["EMAIL"] = "EMAIL";
    General["LICENSE_PLATE"] = "LICENSE_PLATE";
    General["NAME"] = "NAME";
    General["PASSWORD"] = "PASSWORD";
    General["PHONE"] = "PHONE";
    General["USERNAME"] = "USERNAME";
    General["VEHICLE_IDENTIFICATION_NUMBER"] = "VEHICLE_IDENTIFICATION_NUMBER";
})(General || (exports.General = General = {}));
var Finance;
(function (Finance) {
    Finance["CREDIT_DEBIT_CARD_CVV"] = "CREDIT_DEBIT_CARD_CVV";
    Finance["CREDIT_DEBIT_CARD_EXPIRY"] = "CREDIT_DEBIT_CARD_EXPIRY";
    Finance["CREDIT_DEBIT_CARD_NUMBER"] = "CREDIT_DEBIT_CARD_NUMBER";
    Finance["PIN"] = "PIN";
    Finance["SWIFT_CODE"] = "SWIFT_CODE";
    Finance["INTERNATIONAL_BANK_ACCOUNT_NUMBER"] = "INTERNATIONAL_BANK_ACCOUNT_NUMBER";
})(Finance || (exports.Finance = Finance = {}));
var InformationTechnology;
(function (InformationTechnology) {
    InformationTechnology["URL"] = "URL";
    InformationTechnology["IP_ADDRESS"] = "IP_ADDRESS";
    InformationTechnology["MAC_ADDRESS"] = "MAC_ADDRESS";
    InformationTechnology["AWS_ACCESS_KEY"] = "AWS_ACCESS_KEY";
    InformationTechnology["AWS_SECRET_KEY"] = "AWS_SECRET_KEY";
})(InformationTechnology || (exports.InformationTechnology = InformationTechnology = {}));
var USASpecific;
(function (USASpecific) {
    USASpecific["US_BANK_ACCOUNT_NUMBER"] = "US_BANK_ACCOUNT_NUMBER";
    USASpecific["US_BANK_ROUTING_NUMBER"] = "US_BANK_ROUTING_NUMBER";
    USASpecific["US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER"] = "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER";
    USASpecific["US_PASSPORT_NUMBER"] = "US_PASSPORT_NUMBER";
    USASpecific["US_SOCIAL_SECURITY_NUMBER"] = "US_SOCIAL_SECURITY_NUMBER";
})(USASpecific || (exports.USASpecific = USASpecific = {}));
var CanadaSpecific;
(function (CanadaSpecific) {
    CanadaSpecific["CA_HEALTH_NUMBER"] = "CA_HEALTH_NUMBER";
    CanadaSpecific["CA_SOCIAL_INSURANCE_NUMBER"] = "CA_SOCIAL_INSURANCE_NUMBER";
})(CanadaSpecific || (exports.CanadaSpecific = CanadaSpecific = {}));
var UKSpecific;
(function (UKSpecific) {
    UKSpecific["UK_NATIONAL_HEALTH_SERVICE_NUMBER"] = "UK_NATIONAL_HEALTH_SERVICE_NUMBER";
    UKSpecific["UK_NATIONAL_INSURANCE_NUMBER"] = "UK_NATIONAL_INSURANCE_NUMBER";
    UKSpecific["UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER"] = "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER";
})(UKSpecific || (exports.UKSpecific = UKSpecific = {}));
var PiiEntitiesConfigAction;
(function (PiiEntitiesConfigAction) {
    PiiEntitiesConfigAction["BLOCK"] = "BLOCK";
    PiiEntitiesConfigAction["MASK"] = "MASK";
})(PiiEntitiesConfigAction || (exports.PiiEntitiesConfigAction = PiiEntitiesConfigAction = {}));
class SensitiveInformationPolicyConfig extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.piiConfigList = [];
        this.piiConfigList = this.getPIIFilterList(props);
    }
    getPIIFilterList(props) {
        const piiList = [];
        if (props) {
            for (const pii of props) {
                piiList.push(this.getPIITypeString(pii));
            }
            return piiList;
        }
        else {
            throw new Error('No PII Configurations provided');
        }
    }
    getPIITypeString(props) {
        switch (props.type) {
            case General.ADDRESS:
            case General.AGE:
            case General.DRIVER_ID:
            case General.EMAIL:
            case General.LICENSE_PLATE:
            case General.NAME:
            case General.PASSWORD:
            case General.PHONE:
            case General.USERNAME:
            case General.VEHICLE_IDENTIFICATION_NUMBER:
            case InformationTechnology.URL:
            case InformationTechnology.IP_ADDRESS:
            case InformationTechnology.MAC_ADDRESS:
            case InformationTechnology.AWS_ACCESS_KEY:
            case InformationTechnology.AWS_SECRET_KEY:
            case Finance.CREDIT_DEBIT_CARD_CVV:
            case Finance.CREDIT_DEBIT_CARD_EXPIRY:
            case Finance.CREDIT_DEBIT_CARD_NUMBER:
            case Finance.PIN:
            case Finance.SWIFT_CODE:
            case Finance.INTERNATIONAL_BANK_ACCOUNT_NUMBER:
            case USASpecific.US_BANK_ACCOUNT_NUMBER:
            case USASpecific.US_BANK_ROUTING_NUMBER:
            case USASpecific.US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER:
            case USASpecific.US_PASSPORT_NUMBER:
            case USASpecific.US_SOCIAL_SECURITY_NUMBER:
            case CanadaSpecific.CA_HEALTH_NUMBER:
            case CanadaSpecific.CA_SOCIAL_INSURANCE_NUMBER:
            case UKSpecific.UK_NATIONAL_HEALTH_SERVICE_NUMBER:
            case UKSpecific.UK_NATIONAL_INSURANCE_NUMBER:
            case UKSpecific.UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER:
                return {
                    type: props.type,
                    action: props.action ?? 'BLOCK',
                };
            default:
                throw new Error('No valid PersonalIdentifiableInformation value');
        }
    }
}
exports.SensitiveInformationPolicyConfig = SensitiveInformationPolicyConfig;
_a = JSII_RTTI_SYMBOL_1;
SensitiveInformationPolicyConfig[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.SensitiveInformationPolicyConfig", version: "0.1.216" };
//# sourceMappingURL=data:application/json;base64,