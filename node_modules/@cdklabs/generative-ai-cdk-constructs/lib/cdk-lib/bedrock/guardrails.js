"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guardrail = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const fs = require("fs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const kms = require("aws-cdk-lib/aws-kms");
const constructs_1 = require("constructs");
const content_policy_1 = require("./content-policy");
const guardrail_version_1 = require("./guardrail-version");
const pii_list_1 = require("./pii-list");
const utils_1 = require("../../common/helpers/utils");
/**
 * Deploy bedrock guardrail .
 */
class Guardrail extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'bedrock-guardrail', { maxLength: 32, lower: true, separator: '-' });
        this.kmsKeyArn = props.kmsKeyArn ?? new kms.Key(scope, `'${id}Key'`, {
            enableKeyRotation: true,
        }).keyArn;
        const defaultBlockedInputMessaging = 'Sorry, your query voilates our usage policy.';
        const defaultBlockedOutputsMessaging = 'Sorry, I am unable to answer your question because of our usage policy.';
        this.guardrailInstance = new aws_cdk_lib_1.aws_bedrock.CfnGuardrail(this, 'MyGuardrail', {
            blockedInputMessaging: props.blockedInputMessaging ?? defaultBlockedInputMessaging,
            blockedOutputsMessaging: props.blockedOutputsMessaging ?? defaultBlockedOutputsMessaging,
            name: this.name,
            description: props.description,
            kmsKeyArn: this.kmsKeyArn,
            contentPolicyConfig: {
                filtersConfig: new content_policy_1.ContentPolicyConfig(this, `'CP${id}'`, props.filtersConfig).contentPolicyConfigList,
            },
        });
        this.guardrailVersion = this.guardrailInstance.attrVersion;
        this.guardrailId = this.guardrailInstance.attrGuardrailId;
    }
    addSensitiveInformationPolicyConfig(props, guardrailRegexesConfig) {
        if (props) {
            this.guardrailInstance.sensitiveInformationPolicyConfig =
                {
                    piiEntitiesConfig: new pii_list_1.SensitiveInformationPolicyConfig(this, 'PII', props).piiConfigList,
                    regexesConfig: [guardrailRegexesConfig],
                };
        }
        else {
            throw new Error('No guardrailPiiEntityConfig or guardrailRegexesConfig is set in GuardrailProps.');
        }
    }
    async uploadWordPolicyFromFile(filePath) {
        try {
            const wordsFilter = [];
            // Read the file line by line and extract the words
            const fileContents = await fs.promises.readFile(filePath, 'utf8');
            const lines = fileContents.trim().split(',');
            for (const line of lines) {
                const word = line.trim();
                if (word) {
                    wordsFilter.push({ text: word });
                }
            }
            // Add the word policy configuration
            this.addWordPolicyConfig(wordsFilter);
        }
        catch (error) {
            console.error('Error reading file and adding word policy config:', error);
            throw error;
        }
    }
    addWordPolicyConfig(wordsFilter) {
        if (wordsFilter && wordsFilter.length > 0) {
            this.guardrailInstance.wordPolicyConfig =
                {
                    managedWordListsConfig: [{
                            type: 'PROFANITY',
                        }],
                    wordsConfig: wordsFilter,
                };
        }
        else {
            throw new Error('props.wordsFilter is empty or undefined in GuardrailProps.');
        }
    }
    addTopicPolicyConfig(topic) {
        if (topic) {
            this.guardrailInstance.topicPolicyConfig =
                {
                    topicsConfig: topic.topicConfigPropertyList(),
                };
        }
        else {
            throw new Error('topic.topicConfigPropertylist is empty or undefined in GuardrailProps.');
        }
    }
    addTags(props) {
        if (props && props.tags) {
            this.guardrailInstance.tags = props.tags;
        }
    }
    /**
     * Creates a version of the guardrail.
     */
    addVersion(id, description) {
        const version = new guardrail_version_1.GuardrailVersion(this, id, {
            guardrailIdentifier: this.guardrailId,
            description,
        });
        return version;
    }
}
exports.Guardrail = Guardrail;
_a = JSII_RTTI_SYMBOL_1;
Guardrail[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Guardrail", version: "0.1.216" };
//# sourceMappingURL=data:application/json;base64,