"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const nag_suppressions_1 = require("cdk-nag/lib/nag-suppressions");
const constructs_1 = require("constructs");
const utils_1 = require("../../common/helpers/utils");
const amazonaurora_1 = require("../amazonaurora");
const opensearch_vectorindex_1 = require("../opensearch-vectorindex");
const opensearchserverless_1 = require("../opensearchserverless");
const pinecone_1 = require("../pinecone");
/**
 * Knowledge base can be backed by different vector databases.
 * This enum represents the different vector databases that can be used.
 *
 * `OPENSEARCH_SERVERLESS` is the default vector database.
 * `REDIS_ENTERPRISE_CLOUD` is the vector database for Redis Enterprise Cloud.
 * `PINECONE` is the vector database for Pinecone.
 * `AMAZON_AURORA` is the vector database for Amazon Aurora PostgreSQL.
 */
var VectorStoreType;
(function (VectorStoreType) {
    /**
     * `OPENSEARCH_SERVERLESS` is the vector store for OpenSearch Serverless.
     */
    VectorStoreType["OPENSEARCH_SERVERLESS"] = "OPENSEARCH_SERVERLESS";
    /**
     * `PINECONE` is the vector store for Pinecone.
     */
    VectorStoreType["PINECONE"] = "PINECONE";
    /**
     * `RDS` is the vector store for Amazon Aurora.
     */
    VectorStoreType["AMAZON_AURORA"] = "RDS";
})(VectorStoreType || (VectorStoreType = {}));
/**
 * Deploys a Bedrock Knowledge Base and configures a backend by OpenSearch Serverless,
 * Pinecone, Redis Enterprise Cloud or Amazon Aurora PostgreSQL.
 *
 */
class KnowledgeBase extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.instruction = props.instruction;
        const embeddingsModel = props.embeddingsModel;
        const indexName = props.indexName ?? 'bedrock-knowledge-base-default-index';
        const vectorField = props.vectorField ?? 'bedrock-knowledge-base-default-vector';
        const textField = 'AMAZON_BEDROCK_TEXT_CHUNK';
        const metadataField = 'AMAZON_BEDROCK_METADATA';
        this.description = props.description ?? 'CDK deployed Knowledge base'; // even though this prop is optional, if no value is provided it will fail to deploy
        this.knowledgeBaseState = props.knowledgeBaseState ?? 'ENABLED';
        validateModel(embeddingsModel);
        validateVectorIndex(props.vectorStore, props.vectorIndex, props.vectorField, props.indexName);
        if (props.vectorIndex) {
            validateIndexParameters(props.vectorIndex, indexName, vectorField);
        }
        this.name =
            props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'KB', { maxLength: 32 });
        if (props.existingRole) {
            this.role = props.existingRole;
        }
        else {
            const roleName = (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForKnowledgeBase', { maxLength: 64 });
            this.role = new iam.Role(this, 'Role', {
                roleName: roleName,
                assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),
            });
            this.role.assumeRolePolicy.addStatements(new iam.PolicyStatement({
                actions: ['sts:AssumeRole'],
                principals: [new iam.ServicePrincipal('bedrock.amazonaws.com')],
                conditions: {
                    StringEquals: {
                        'aws:SourceAccount': cdk.Stack.of(this).account,
                    },
                    ArnLike: {
                        'aws:SourceArn': cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'knowledge-base',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    },
                },
            }));
            this.role.addToPolicy(new iam.PolicyStatement({
                actions: ['bedrock:InvokeModel'],
                resources: [embeddingsModel.asArn(this)],
            }));
        }
        /**
         * Create the vector store if the vector store was provided by the user.
         * Otherwise check againts all possible vector datastores.
         * If none was provided create default OpenSearch Serverless Collection.
         */
        if (props.vectorStore instanceof opensearchserverless_1.VectorCollection) {
            ({
                vectorStore: this.vectorStore,
                vectorStoreType: this.vectorStoreType,
            } = this.handleOpenSearchCollection(props));
        }
        else if (props.vectorStore instanceof pinecone_1.PineconeVectorStore) {
            ({
                vectorStore: this.vectorStore,
                vectorStoreType: this.vectorStoreType,
            } = this.handlePineconeVectorStore(props));
        }
        else if (props.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore) {
            ({
                vectorStore: this.vectorStore,
                vectorStoreType: this.vectorStoreType,
            } = this.handleAmazonAuroraVectorStore(props));
        }
        else if (props.vectorStore instanceof amazonaurora_1.AmazonAuroraDefaultVectorStore) {
            ({
                vectorStore: this.vectorStore,
                vectorStoreType: this.vectorStoreType,
            } = this.handleAmazonAuroraDefaultVectorStore(props));
        }
        else {
            ({
                vectorStore: this.vectorStore,
                vectorStoreType: this.vectorStoreType,
            } = this.handleOpenSearchDefaultVectorCollection());
        }
        /**
         * We need to add `secretsmanager:GetSecretValue` to the role
         * of the knowledge base if we use data sources
         * other than OpenSearch Serverless.
         */
        if (!(this.vectorStore instanceof opensearchserverless_1.VectorCollection)) {
            this.role.addToPolicy(new iam.PolicyStatement({
                actions: ['secretsmanager:GetSecretValue'],
                resources: [this.vectorStore.credentialsSecretArn],
            }));
        }
        /**
         * We need to add `rds-data:ExecuteStatement`,
         * `rds-data:BatchExecuteStatement` and
         * `rds:DescribeDBClusters` to the role
         * of the knowledge base if we use Amazon Aurora as
         * a data source.
         */
        if (this.vectorStore instanceof amazonaurora_1.AmazonAuroraDefaultVectorStore ||
            this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore) {
            this.role.addToPolicy(new iam.PolicyStatement({
                actions: [
                    'rds-data:ExecuteStatement',
                    'rds-data:BatchExecuteStatement',
                    'rds:DescribeDBClusters',
                ],
                resources: [this.vectorStore.resourceArn],
            }));
        }
        /**
         * Create the vector index if the vector store is OpenSearch Serverless
         * and it was not provided. Otherwise use the provided vector index.
         */
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS) {
            if (!props.vectorIndex) {
                this.vectorIndex = new opensearch_vectorindex_1.VectorIndex(this, 'KBIndex', {
                    collection: this.vectorStore,
                    indexName,
                    vectorField,
                    vectorDimensions: embeddingsModel.vectorDimensions,
                    mappings: [
                        {
                            mappingField: 'AMAZON_BEDROCK_TEXT_CHUNK',
                            dataType: 'text',
                            filterable: true,
                        },
                        {
                            mappingField: 'AMAZON_BEDROCK_METADATA',
                            dataType: 'text',
                            filterable: false,
                        },
                    ],
                });
                this.vectorIndex.node.addDependency(this.vectorStore);
            }
            else {
                this.vectorIndex = props.vectorIndex;
            }
        }
        /**
         * Create storage configuraion. If it is of type of
         * `AmazonAuroraVectorStore` get textField, metadataField,
         * vectorField from the arguments. Otherwise use default values.
         */
        const storageConfiguration = {
            indexName: indexName,
            vectorStore: this.vectorStore,
            vectorStoreType: this.vectorStoreType,
            vectorField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore
                ? this.vectorStore.vectorField
                : vectorField,
            textField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.textField
                : textField,
            metadataField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.metadataField
                : metadataField,
        };
        const knowledgeBase = new aws_cdk_lib_1.aws_bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            knowledgeBaseConfiguration: {
                type: 'VECTOR',
                vectorKnowledgeBaseConfiguration: {
                    embeddingModelArn: embeddingsModel.asArn(this),
                },
            },
            name: this.name,
            roleArn: this.role.roleArn,
            storageConfiguration: getStorageConfiguration(storageConfiguration),
            description: props.description,
            tags: props.tags,
        });
        this.knowledgeBaseInstance = knowledgeBase;
        const kbCRPolicy = new iam.Policy(this, 'KBCRPolicy', {
            // roles: [crProvider.role],
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:CreateKnowledgeBase',
                        /**
                         * We need to add `bedrock:AssociateThirdPartyKnowledgeBase` if
                         * we are deploying Redis or Pinecone data sources
                         */
                        //...(this.vectorStoreType === VectorStoreType.REDIS_ENTERPRISE_CLOUD ||
                        ...(this.vectorStoreType === VectorStoreType.PINECONE
                            ? ['bedrock:AssociateThirdPartyKnowledgeBase']
                            : []),
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:UpdateKnowledgeBase',
                        'bedrock:DeleteKnowledgeBase',
                        'bedrock:TagResource',
                    ],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'knowledge-base',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
                new iam.PolicyStatement({
                    actions: ['iam:PassRole'],
                    resources: [this.role.roleArn],
                }),
            ],
        });
        knowledgeBase.node.addDependency(this.role);
        knowledgeBase.node.addDependency(kbCRPolicy);
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS &&
            this.vectorIndex) {
            knowledgeBase.node.addDependency(this.vectorIndex);
        }
        if (this.vectorStoreType === VectorStoreType.AMAZON_AURORA &&
            this.vectorStore instanceof amazonaurora_1.AmazonAuroraDefaultVectorStore) {
            knowledgeBase.node.addDependency(this.vectorStore);
        }
        nag_suppressions_1.NagSuppressions.addResourceSuppressions(kbCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: "Bedrock CreateKnowledgeBase can't be restricted by resource.",
            },
        ], true);
        this.knowledgeBaseArn = knowledgeBase.attrKnowledgeBaseArn;
        this.knowledgeBaseId = knowledgeBase.attrKnowledgeBaseId;
    }
    /**
     * Handle VectorCollection type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchCollection(props) {
        const vectorStore = props.vectorStore;
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Handle PineconeVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of PineconeVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handlePineconeVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.PINECONE,
        };
    }
    /**
     * Handle AmazonAuroraVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of AmazonAuroraVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleAmazonAuroraVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.AMAZON_AURORA,
        };
    }
    /**
     * Handle AmazonAuroraDefaultVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of AmazonAuroraDefaultVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleAmazonAuroraDefaultVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.AMAZON_AURORA,
        };
    }
    /**
     * Handle the default VectorStore type.
     *
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchDefaultVectorCollection() {
        const vectorStore = new opensearchserverless_1.VectorCollection(this, 'KBVectors');
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Associate knowledge base with an agent
     */
    associateToAgent(agent) {
        const agentKnowledgeBaseProperty = {
            description: this.description,
            knowledgeBaseId: this.knowledgeBaseId,
            knowledgeBaseState: this.knowledgeBaseState,
        };
        agent.knowledgeBases = [agentKnowledgeBaseProperty];
    }
}
exports.KnowledgeBase = KnowledgeBase;
_a = JSII_RTTI_SYMBOL_1;
KnowledgeBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KnowledgeBase", version: "0.1.216" };
/**
 * Validate that Bedrock Knowledge Base can use the selected model.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateModel(foundationModel) {
    if (!foundationModel.supportsKnowledgeBase) {
        throw new Error(`The model ${foundationModel} is not supported by Bedrock Knowledge Base.`);
    }
}
/**
 * Validate if VectorIndex was provided for a VectorStore of type
 * other than `VectorCollection`.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateVectorIndex(vectorStore, vectorIndex, vectorField, indexName) {
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorIndex) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorIndex should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && indexName) {
        throw new Error('If vectorStore is not of type VectorCollection, indexName should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorField) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorField should not be provided ' +
            'in KnowledgeBase construct.');
    }
}
/**
 * Validate that indexName and vectorField parameters are identical
 * in KnowledgeBase construct if VectorIndex was created manually.
 *
 * By default we assign `vectorIndex` to `bedrock-knowledge-base-default-index`
 * value and if user provides `vectorIndex` manually, we need to make sure
 * they also provide it in KnowledgeBase construct if the value is not
 * `bedrock-knowledge-base-default-index`. Same for vectorField.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateIndexParameters(vectorIndex, indexName, vectorField) {
    if (vectorIndex.indexName !== 'bedrock-knowledge-base-default-index') {
        if (vectorIndex.indexName !== indexName) {
            throw new Error('Default value of indexName is `bedrock-knowledge-base-default-index`.' +
                ' If you create VectorIndex manually and assign vectorIndex to value other than' +
                ' `bedrock-knowledge-base-default-index` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-index`' +
                ' then do not assign indexName in KnowledgeBase construct.');
        }
    }
    if (vectorIndex.vectorField !== 'bedrock-knowledge-base-default-vector') {
        if (vectorIndex.vectorField !== vectorField) {
            throw new Error('Default value of vectorField is `bedrock-knowledge-base-default-vector`.' +
                ' If you create VectorIndex manually and assign vectorField to value other than' +
                ' `bedrock-knowledge-base-default-field` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-vector`' +
                ' then do not assign vectorField in KnowledgeBase construct.');
        }
    }
}
/**
 * Determine storage configuration based on vector store type.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function getStorageConfiguration(params) {
    switch (params.vectorStoreType) {
        case VectorStoreType.OPENSEARCH_SERVERLESS:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.OPENSEARCH_SERVERLESS,
                opensearchServerlessConfiguration: {
                    collectionArn: params.vectorStore.collectionArn,
                    fieldMapping: {
                        vectorField: params.vectorField,
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                    vectorIndexName: params.indexName,
                },
            };
        case VectorStoreType.PINECONE:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.PINECONE,
                pineconeConfiguration: {
                    namespace: params.vectorStore.namespace || undefined,
                    connectionString: params.vectorStore.connectionString,
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    fieldMapping: {
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                },
            };
        case VectorStoreType.AMAZON_AURORA:
            params.vectorStore =
                params.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore
                    ? params.vectorStore
                    : params.vectorStore;
            return {
                type: VectorStoreType.AMAZON_AURORA,
                rdsConfiguration: {
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    databaseName: params.vectorStore.databaseName,
                    resourceArn: params.vectorStore.resourceArn,
                    tableName: params.vectorStore.tableName,
                    fieldMapping: {
                        vectorField: params.vectorField.replace(/-/g, '_'),
                        primaryKeyField: params.vectorStore.primaryKeyField,
                        textField: params.textField.toLowerCase(),
                        metadataField: params.metadataField.toLowerCase(),
                    },
                },
            };
        default:
            throw new Error(`Unsupported vector store type: ${params.vectorStoreType}`);
    }
}
//# sourceMappingURL=data:application/json;base64,