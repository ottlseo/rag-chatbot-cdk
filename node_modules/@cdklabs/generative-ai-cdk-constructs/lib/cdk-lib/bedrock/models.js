"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockFoundationModel = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
/**
 * Bedrock models.
 *
 * If you need to use a model name that doesn't exist as a static member, you
 * can instantiate a `BedrockFoundationModel` object, e.g: `new BedrockFoundationModel('my-model')`.
 */
class BedrockFoundationModel {
    constructor(value, props = {}) {
        this.modelId = value;
        this.supportsAgents = props.supportsAgents ?? false;
        this.vectorDimensions = props.vectorDimensions;
        this.supportsKnowledgeBase = props.supportsKnowledgeBase ?? false;
    }
    toString() {
        return this.modelId;
    }
    asArn(construct) {
        const region = cdk.Stack.of(construct).region;
        return `arn:aws:bedrock:${region}::foundation-model/${this.modelId}`;
    }
}
exports.BedrockFoundationModel = BedrockFoundationModel;
_a = JSII_RTTI_SYMBOL_1;
BedrockFoundationModel[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.BedrockFoundationModel", version: "0.1.216" };
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2 = new BedrockFoundationModel('anthropic.claude-v2', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2_1 = new BedrockFoundationModel('anthropic.claude-v2:1', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_INSTANT_V1_2 = new BedrockFoundationModel('anthropic.claude-instant-v1', { supportsAgents: true });
BedrockFoundationModel.AMAZON_TITAN_TEXT_EXPRESS_V1 = new BedrockFoundationModel('amazon.titan-text-express-v1', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_SONNET_V1_0 = new BedrockFoundationModel('anthropic.claude-3-sonnet-20240229-v1:0', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_HAIKU_V1_0 = new BedrockFoundationModel('anthropic.claude-3-haiku-20240307-v1:0', { supportsAgents: true });
BedrockFoundationModel.AMAZON_TITAN_PREMIER_V1_0 = new BedrockFoundationModel('amazon.titan-text-premier-v1:0', { supportsAgents: true });
BedrockFoundationModel.TITAN_EMBED_TEXT_V1 = new BedrockFoundationModel('amazon.titan-embed-text-v1', { supportsKnowledgeBase: true, vectorDimensions: 1536 });
BedrockFoundationModel.TITAN_EMBED_TEXT_V2_1024 = new BedrockFoundationModel('amazon.titan-embed-text-v2:0', { supportsKnowledgeBase: true, vectorDimensions: 1024 });
BedrockFoundationModel.COHERE_EMBED_ENGLISH_V3 = new BedrockFoundationModel('cohere.embed-english-v3', { supportsKnowledgeBase: true, vectorDimensions: 1024 });
BedrockFoundationModel.COHERE_EMBED_MULTILINGUAL_V3 = new BedrockFoundationModel('cohere.embed-multilingual-v3', { supportsKnowledgeBase: true, vectorDimensions: 1024 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILG1DQUFtQztBQXVCbkM7Ozs7O0dBS0c7QUFDSCxNQUFhLHNCQUFzQjtJQWtEakMsWUFBWSxLQUFhLEVBQUUsUUFBcUMsRUFBRTtRQUNoRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDO1FBQ3BELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFDL0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUM7SUFDcEUsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFxQjtRQUN6QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDOUMsT0FBTyxtQkFBbUIsTUFBTSxzQkFBc0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZFLENBQUM7O0FBaEVILHdEQWlFQzs7O0FBaEV3QiwwQ0FBbUIsR0FBRyxJQUFJLHNCQUFzQixDQUNyRSxxQkFBcUIsRUFDckIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQ3pCLENBQUM7QUFDcUIsNENBQXFCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkUsdUJBQXVCLEVBQ3ZCLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUN6QixDQUFDO0FBQ3FCLG9EQUE2QixHQUFHLElBQUksc0JBQXNCLENBQy9FLDZCQUE2QixFQUM3QixFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FDekIsQ0FBQztBQUNxQixtREFBNEIsR0FBRyxJQUFJLHNCQUFzQixDQUM5RSw4QkFBOEIsRUFDOUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQ3pCLENBQUM7QUFDcUIsbURBQTRCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDOUUseUNBQXlDLEVBQ3pDLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUN6QixDQUFDO0FBQ3FCLGtEQUEyQixHQUFHLElBQUksc0JBQXNCLENBQzdFLHdDQUF3QyxFQUN4QyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FDekIsQ0FBQztBQUNxQixnREFBeUIsR0FBRyxJQUFJLHNCQUFzQixDQUMzRSxnQ0FBZ0MsRUFDaEMsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQ3pCLENBQUM7QUFDcUIsMENBQW1CLEdBQUcsSUFBSSxzQkFBc0IsQ0FDckUsNEJBQTRCLEVBQzVCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxDQUN4RCxDQUFDO0FBQ3FCLCtDQUF3QixHQUFHLElBQUksc0JBQXNCLENBQzFFLDhCQUE4QixFQUM5QixFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FDeEQsQ0FBQztBQUNxQiw4Q0FBdUIsR0FBRyxJQUFJLHNCQUFzQixDQUN6RSx5QkFBeUIsRUFDekIsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLENBQ3hELENBQUM7QUFDcUIsbURBQTRCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDOUUsOEJBQThCLEVBQzlCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxDQUN4RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGludGVyZmFjZSBCZWRyb2NrRm91bmRhdGlvbk1vZGVsUHJvcHMge1xuICAvKipcbiAgICogQmVkcm9jayBBZ2VudHMgY2FuIHVzZSB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBzdXBwb3J0c0FnZW50cz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBCZWRyb2NrIEtub3dsZWRnZSBCYXNlIGNhbiB1c2UgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgc3VwcG9ydHNLbm93bGVkZ2VCYXNlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEVtYmVkZGluZyBtb2RlbHMgaGF2ZSBkaWZmZXJlbnQgdmVjdG9yIGRpbWVuc2lvbnMuXG4gICAqIE9ubHkgYXBwbGljYWJsZSBmb3IgZW1iZWRkaW5nIG1vZGVscy5cbiAgICovXG4gIHJlYWRvbmx5IHZlY3RvckRpbWVuc2lvbnM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQmVkcm9jayBtb2RlbHMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gdXNlIGEgbW9kZWwgbmFtZSB0aGF0IGRvZXNuJ3QgZXhpc3QgYXMgYSBzdGF0aWMgbWVtYmVyLCB5b3VcbiAqIGNhbiBpbnN0YW50aWF0ZSBhIGBCZWRyb2NrRm91bmRhdGlvbk1vZGVsYCBvYmplY3QsIGUuZzogYG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKCdteS1tb2RlbCcpYC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFOVEhST1BJQ19DTEFVREVfVjIgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW50aHJvcGljLmNsYXVkZS12MicsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFOVEhST1BJQ19DTEFVREVfVjJfMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLXYyOjEnLFxuICAgIHsgc3VwcG9ydHNBZ2VudHM6IHRydWUgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFX0lOU1RBTlRfVjFfMiA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLWluc3RhbnQtdjEnLFxuICAgIHsgc3VwcG9ydHNBZ2VudHM6IHRydWUgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTUFaT05fVElUQU5fVEVYVF9FWFBSRVNTX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FtYXpvbi50aXRhbi10ZXh0LWV4cHJlc3MtdjEnLFxuICAgIHsgc3VwcG9ydHNBZ2VudHM6IHRydWUgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFX1NPTk5FVF9WMV8wID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjktdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFOVEhST1BJQ19DTEFVREVfSEFJS1VfVjFfMCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLTMtaGFpa3UtMjAyNDAzMDctdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFNQVpPTl9USVRBTl9QUkVNSUVSX1YxXzAgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLXRleHQtcHJlbWllci12MTowJyxcbiAgICB7IHN1cHBvcnRzQWdlbnRzOiB0cnVlIH0sXG4gICk7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVElUQU5fRU1CRURfVEVYVF9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MScsXG4gICAgeyBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsIHZlY3RvckRpbWVuc2lvbnM6IDE1MzYgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSVRBTl9FTUJFRF9URVhUX1YyXzEwMjQgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLWVtYmVkLXRleHQtdjI6MCcsXG4gICAgeyBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsIHZlY3RvckRpbWVuc2lvbnM6IDEwMjQgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDT0hFUkVfRU1CRURfRU5HTElTSF9WMyA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdjb2hlcmUuZW1iZWQtZW5nbGlzaC12MycsXG4gICAgeyBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsIHZlY3RvckRpbWVuc2lvbnM6IDEwMjQgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDT0hFUkVfRU1CRURfTVVMVElMSU5HVUFMX1YzID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2NvaGVyZS5lbWJlZC1tdWx0aWxpbmd1YWwtdjMnLFxuICAgIHsgc3VwcG9ydHNLbm93bGVkZ2VCYXNlOiB0cnVlLCB2ZWN0b3JEaW1lbnNpb25zOiAxMDI0IH0sXG4gICk7XG5cbiAgcHVibGljIHJlYWRvbmx5IG1vZGVsSWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRzQWdlbnRzOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgdmVjdG9yRGltZW5zaW9ucz86IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRzS25vd2xlZGdlQmFzZTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgcHJvcHM6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxQcm9wcyA9IHt9KSB7XG4gICAgdGhpcy5tb2RlbElkID0gdmFsdWU7XG4gICAgdGhpcy5zdXBwb3J0c0FnZW50cyA9IHByb3BzLnN1cHBvcnRzQWdlbnRzID8/IGZhbHNlO1xuICAgIHRoaXMudmVjdG9yRGltZW5zaW9ucyA9IHByb3BzLnZlY3RvckRpbWVuc2lvbnM7XG4gICAgdGhpcy5zdXBwb3J0c0tub3dsZWRnZUJhc2UgPSBwcm9wcy5zdXBwb3J0c0tub3dsZWRnZUJhc2UgPz8gZmFsc2U7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1vZGVsSWQ7XG4gIH1cblxuICBhc0Fybihjb25zdHJ1Y3Q6IElDb25zdHJ1Y3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlZ2lvbiA9IGNkay5TdGFjay5vZihjb25zdHJ1Y3QpLnJlZ2lvbjtcbiAgICByZXR1cm4gYGFybjphd3M6YmVkcm9jazoke3JlZ2lvbn06OmZvdW5kYXRpb24tbW9kZWwvJHt0aGlzLm1vZGVsSWR9YDtcbiAgfVxufVxuIl19