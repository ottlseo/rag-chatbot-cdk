"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentPolicyConfig = exports.FiltersConfigStrength = exports.FiltersConfigType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
var FiltersConfigType;
(function (FiltersConfigType) {
    FiltersConfigType["VIOLENCE"] = "VIOLENCE";
    FiltersConfigType["HATE"] = "HATE";
    FiltersConfigType["INSULTS"] = "INSULTS";
    FiltersConfigType["MISCONDUCT"] = "MISCONDUCT";
    FiltersConfigType["PROMPT_ATTACK"] = "PROMPT_ATTACK";
    FiltersConfigType["SEXUAL"] = "SEXUAL";
})(FiltersConfigType || (exports.FiltersConfigType = FiltersConfigType = {}));
var FiltersConfigStrength;
(function (FiltersConfigStrength) {
    FiltersConfigStrength["NONE"] = "NONE";
    FiltersConfigStrength["LOW"] = "LOW";
    FiltersConfigStrength["MEDIUM"] = "MEDIUM";
    FiltersConfigStrength["HIGH"] = "HIGH";
})(FiltersConfigStrength || (exports.FiltersConfigStrength = FiltersConfigStrength = {}));
class ContentPolicyConfig extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.contentPolicyConfigList = this.createContentPolicyConfigList(props);
    }
    createContentPolicyConfigList(props) {
        const configList = [];
        if (props) {
            for (const prop of props) {
                configList.push(this.createContentFilterConfig(prop));
            }
        }
        else {
            // set deafault content policy config
            configList.push({
                type: FiltersConfigType.HATE,
                inputStrength: FiltersConfigStrength.HIGH,
                outputStrength: FiltersConfigStrength.HIGH,
            }, {
                type: FiltersConfigType.VIOLENCE,
                inputStrength: FiltersConfigStrength.HIGH,
                outputStrength: FiltersConfigStrength.HIGH,
            }, {
                type: FiltersConfigType.MISCONDUCT,
                inputStrength: FiltersConfigStrength.HIGH,
                outputStrength: FiltersConfigStrength.HIGH,
            }, {
                type: FiltersConfigType.PROMPT_ATTACK,
                inputStrength: FiltersConfigStrength.NONE,
                outputStrength: FiltersConfigStrength.NONE,
            }, {
                type: FiltersConfigType.SEXUAL,
                inputStrength: FiltersConfigStrength.HIGH,
                outputStrength: FiltersConfigStrength.HIGH,
            }, {
                type: FiltersConfigType.INSULTS,
                inputStrength: FiltersConfigStrength.HIGH,
                outputStrength: FiltersConfigStrength.HIGH,
            });
        }
        return configList;
    }
    createContentFilterConfig(prop) {
        switch (prop.filtersConfigType) {
            case FiltersConfigType.HATE:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.HATE,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            case FiltersConfigType.PROMPT_ATTACK:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.PROMPT_ATTACK,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            case FiltersConfigType.SEXUAL:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.SEXUAL,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            case FiltersConfigType.MISCONDUCT:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.MISCONDUCT,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            case FiltersConfigType.INSULTS:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.INSULTS,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            case FiltersConfigType.VIOLENCE:
                return {
                    type: prop.filtersConfigType ?? FiltersConfigType.VIOLENCE,
                    inputStrength: prop.inputStrength ?? FiltersConfigStrength.NONE,
                    outputStrength: prop.outputStrength ?? FiltersConfigStrength.NONE,
                };
            default:
                throw new Error('Invalid content ploicy config type');
        }
    }
}
exports.ContentPolicyConfig = ContentPolicyConfig;
_a = JSII_RTTI_SYMBOL_1;
ContentPolicyConfig[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ContentPolicyConfig", version: "0.1.216" };
//# sourceMappingURL=data:application/json;base64,