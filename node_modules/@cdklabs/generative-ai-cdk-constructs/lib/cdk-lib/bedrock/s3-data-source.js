"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3DataSource = exports.ChunkingStrategy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const CHUNKING_OVERLAP = 20;
const CHUNKING_MAX_TOKENS = 300;
/**
 * Knowledge base can split your source data into chunks. A chunk refers to an
 * excerpt from a data source that is returned when the knowledge base that it
 * belongs to is queried. You have the following options for chunking your
 * data. If you opt for NONE, then you may want to pre-process your files by
 * splitting them up such that each file corresponds to a chunk.
 */
var ChunkingStrategy;
(function (ChunkingStrategy) {
    /**
     * Amazon Bedrock splits your source data into chunks of the approximate size
     * that you set in the `fixedSizeChunkingConfiguration`.
     */
    ChunkingStrategy["FIXED_SIZE"] = "FIXED_SIZE";
    /**
     * `FIXED_SIZE` with the default chunk size of 300 tokens and 20% overlap.
     * If default is selected, chunk size and overlap set by the user will be
     * ignored.
     */
    ChunkingStrategy["DEFAULT"] = "DEFAULT";
    /**
     * Amazon Bedrock treats each file as one chunk. If you choose this option,
     * you may want to pre-process your documents by splitting them into separate
     * files.
     */
    ChunkingStrategy["NONE"] = "NONE";
})(ChunkingStrategy || (exports.ChunkingStrategy = ChunkingStrategy = {}));
/**
 * Sets up a data source to be added to a knowledge base.
 */
class S3DataSource extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const knowledgeBase = props.knowledgeBase;
        const dataSourceName = props.dataSourceName;
        const bucket = props.bucket;
        const inclusionPrefixes = props.inclusionPrefixes;
        const chunkingStrategy = props.chunkingStrategy ?? ChunkingStrategy.DEFAULT;
        const maxTokens = props.maxTokens ?? CHUNKING_MAX_TOKENS;
        const overlapPercentage = props.overlapPercentage ?? CHUNKING_OVERLAP;
        const kmsKey = props.kmsKey;
        bucket.grantRead(knowledgeBase.role);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(knowledgeBase.role, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'The KB role needs read only access to all objects in the data source bucket.',
            },
        ], true);
        this.dataSource = new aws_cdk_lib_1.aws_bedrock.CfnDataSource(this, 'DataSource', {
            knowledgeBaseId: knowledgeBase.knowledgeBaseId,
            name: dataSourceName,
            dataSourceConfiguration: {
                type: 'S3',
                s3Configuration: {
                    bucketArn: bucket.bucketArn,
                    inclusionPrefixes: inclusionPrefixes,
                },
            },
            vectorIngestionConfiguration: vectorIngestionConfiguration(chunkingStrategy, maxTokens, overlapPercentage),
            serverSideEncryptionConfiguration: kmsKey ? {
                kmsKeyArn: kmsKey.keyArn,
            } : undefined,
        });
        this.dataSourceId = this.dataSource.attrDataSourceId;
    }
}
exports.S3DataSource = S3DataSource;
_a = JSII_RTTI_SYMBOL_1;
S3DataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.S3DataSource", version: "0.1.216" };
function vectorIngestionConfiguration(chunkingStrategy, maxTokens = CHUNKING_MAX_TOKENS, overlapPercentage = CHUNKING_OVERLAP) {
    if (chunkingStrategy === ChunkingStrategy.FIXED_SIZE) {
        if (maxTokens <= 20 || maxTokens >= 8000) {
            throw new Error(`maxTokens must be between 20 and 8000, got ${maxTokens}`);
        }
        if (overlapPercentage < 0 || overlapPercentage > 100) {
            throw new Error(`overlapPercentage must be between 0 and 100, got ${overlapPercentage}`);
        }
        return {
            chunkingConfiguration: {
                chunkingStrategy: chunkingStrategy,
                fixedSizeChunkingConfiguration: {
                    maxTokens,
                    overlapPercentage,
                },
            },
        };
    }
    else if (chunkingStrategy === ChunkingStrategy.NONE) {
        return {
            chunkingConfiguration: {
                chunkingStrategy,
            },
        };
    }
    else { // DEFAULT
        return {
            chunkingConfiguration: {
                chunkingStrategy: ChunkingStrategy.FIXED_SIZE,
                fixedSizeChunkingConfiguration: {
                    maxTokens: CHUNKING_MAX_TOKENS,
                    overlapPercentage: CHUNKING_OVERLAP,
                },
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,