"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebCrawler = exports.CrawlerTargetType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const crypto = require("crypto");
const path = require("path");
const url = require("url");
const cdk = require("aws-cdk-lib");
const batch = require("aws-cdk-lib/aws-batch");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_ecr_assets = require("aws-cdk-lib/aws-ecr-assets");
const ecs = require("aws-cdk-lib/aws-ecs");
const events = require("aws-cdk-lib/aws-events");
const targets = require("aws-cdk-lib/aws-events-targets");
const iam = require("aws-cdk-lib/aws-iam");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const kms = require("aws-cdk-lib/aws-kms");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const s3 = require("aws-cdk-lib/aws-s3");
const sns = require("aws-cdk-lib/aws-sns");
const cr = require("aws-cdk-lib/custom-resources");
const cdk_nag_1 = require("cdk-nag");
const base_class_1 = require("../../../common/base-class");
const base_class_2 = require("../../../common/base-class/base-class");
const s3_bucket_helper = require("../../../common/helpers/s3-bucket-helper");
const vpc_helper = require("../../../common/helpers/vpc-helper");
const types_1 = require("../../../patterns/gen-ai/aws-rag-appsync-stepfn-kendra/types");
var CrawlerTargetType;
(function (CrawlerTargetType) {
    CrawlerTargetType["WEBSITE"] = "website";
    CrawlerTargetType["RSS_FEED"] = "rss_feed";
})(CrawlerTargetType || (exports.CrawlerTargetType = CrawlerTargetType = {}));
class WebCrawler extends base_class_2.BaseClass {
    /**
     * Constructs a new instance of the WebCrawler class.
     * @param {Construct} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {WebCrawlerProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope, id, props) {
        super(scope, id);
        vpc_helper.CheckVpcProps(props);
        s3_bucket_helper.CheckS3Props({
            existingBucketObj: props.existingOutputBucketObj,
            bucketProps: props.bucketOutputProps,
        });
        if (props?.existingVpc) {
            this.vpc = props.existingVpc;
        }
        else if (props.vpcProps) {
            this.vpc = new ec2.Vpc(this, 'webCrawlerVpc', props.vpcProps);
        }
        else {
            this.vpc = new ec2.Vpc(this, 'webCrawlerVpc', {
                createInternetGateway: true,
                natGateways: 1,
            });
        }
        // add VPC endpoints for the compute environment
        vpc_helper.AddAwsServiceEndpoint(this, this.vpc, types_1.ServiceEndpointTypeEnum.ECR_API);
        vpc_helper.AddAwsServiceEndpoint(this, this.vpc, types_1.ServiceEndpointTypeEnum.ECR_DKR);
        vpc_helper.AddAwsServiceEndpoint(this, this.vpc, types_1.ServiceEndpointTypeEnum.S3);
        // vpc flowloggroup
        const logGroup = new logs.LogGroup(this, 'webCrawlerConstructLogGroup');
        const role = new iam.Role(this, 'webCrawlerConstructRole', {
            assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),
        });
        // vpc flowlogs
        new ec2.FlowLog(this, 'FlowLog', {
            resourceType: ec2.FlowLogResourceType.fromVpc(this.vpc),
            destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role),
        });
        const baseProps = {
            stage: props.stage,
            constructName: base_class_1.ConstructName.AWSWEBCRAWLER,
            constructId: id,
            observability: props.observability,
        };
        this.updateEnvSuffix(baseProps);
        this.addObservabilityToConstruct(baseProps);
        const targetsTable = new dynamodb.Table(this, 'targetsTable', {
            partitionKey: { name: 'target_url', type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            pointInTimeRecovery: true,
            encryption: dynamodb.TableEncryption.AWS_MANAGED,
        });
        const jobsTable = new dynamodb.Table(this, 'jobsTable', {
            partitionKey: { name: 'target_url', type: dynamodb.AttributeType.STRING },
            sortKey: { name: 'job_id', type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            pointInTimeRecovery: true,
            encryption: dynamodb.TableEncryption.AWS_MANAGED,
        });
        // bucket for storing server access logging
        const serverAccessLogBucket = new s3.Bucket(this, 'serverAccessLogBucket' + this.stage, {
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            encryption: s3.BucketEncryption.S3_MANAGED,
            enforceSSL: true,
            versioned: true,
            lifecycleRules: [
                {
                    expiration: cdk.Duration.days(90),
                },
            ],
        });
        // Bucket containing the output data uploaded by the crawler
        let dataBucket;
        if (!props.existingOutputBucketObj) {
            let tmpBucket;
            if (!props.bucketOutputProps) {
                tmpBucket = new s3.Bucket(this, 'webCrawlerDataBucket' + this.stage, {
                    accessControl: s3.BucketAccessControl.PRIVATE,
                    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                    encryption: s3.BucketEncryption.S3_MANAGED,
                    bucketName: 'outputbucket' + this.stage.toLowerCase() + '-' + cdk.Aws.REGION + '-' + cdk.Aws.ACCOUNT_ID,
                    serverAccessLogsBucket: serverAccessLogBucket,
                    enforceSSL: true,
                    versioned: true,
                    lifecycleRules: [
                        {
                            expiration: cdk.Duration.days(90),
                        },
                    ],
                });
            }
            else {
                tmpBucket = new s3.Bucket(this, 'webCrawlerDataBucket' + this.stage, props.bucketOutputProps);
            }
            dataBucket = tmpBucket;
            this.dataBucket = tmpBucket;
        }
        else {
            dataBucket = props.existingOutputBucketObj;
        }
        const snsTopic = new sns.Topic(this, 'webCrawlerTopic', {
            masterKey: kms.Alias.fromAliasName(scope, 'aws-managed-key', 'alias/aws/sns'),
        });
        // Apply topic policy to enforce only the topic owner can publish and subscribe to this topic
        snsTopic.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            sid: 'TopicOwnerOnlyAccess',
            resources: [`${snsTopic.topicArn}`],
            actions: [
                'SNS:Publish',
                'SNS:RemovePermission',
                'SNS:SetTopicAttributes',
                'SNS:DeleteTopic',
                'SNS:ListSubscriptionsByTopic',
                'SNS:GetTopicAttributes',
                'SNS:Receive',
                'SNS:AddPermission',
                'SNS:Subscribe',
            ],
            principals: [new aws_iam_1.AccountPrincipal(cdk.Stack.of(snsTopic).account)],
            effect: aws_iam_1.Effect.ALLOW,
            conditions: {
                StringEquals: {
                    'AWS:SourceOwner': cdk.Stack.of(snsTopic).account,
                },
            },
        }));
        // Apply Topic policy to enforce encryption of data in transit
        snsTopic.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            sid: 'HttpsOnly',
            resources: [`${snsTopic.topicArn}`],
            actions: [
                'SNS:Publish',
                'SNS:RemovePermission',
                'SNS:SetTopicAttributes',
                'SNS:DeleteTopic',
                'SNS:ListSubscriptionsByTopic',
                'SNS:GetTopicAttributes',
                'SNS:Receive',
                'SNS:AddPermission',
                'SNS:Subscribe',
            ],
            principals: [new aws_iam_1.AnyPrincipal()],
            effect: aws_iam_1.Effect.DENY,
            conditions: {
                Bool: {
                    'aws:SecureTransport': 'false',
                },
            },
        }));
        const computeEnvironment = new batch.FargateComputeEnvironment(this, 'webCrawlerEnvironment', {
            vpc: this.vpc,
            maxvCpus: 8,
            replaceComputeEnvironment: true,
            updateTimeout: cdk.Duration.minutes(30),
            updateToLatestImageVersion: true,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        });
        const jobQueue = new batch.JobQueue(this, 'webCrawlerJobQueue', {
            computeEnvironments: [
                {
                    computeEnvironment,
                    order: 1,
                },
            ],
            priority: 1,
        });
        const webCrawlerJobRole = new iam.Role(this, 'webCrawlerJobRole', {
            assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
            inlinePolicies: {
                FargateContainerServiceRolePolicy: new iam.PolicyDocument({
                    statements: [
                        new iam.PolicyStatement({
                            actions: ['ecr:BatchCheckLayerAvailability', 'ecr:GetDownloadUrlForLayer', 'ecr:BatchGetImage'],
                            effect: iam.Effect.ALLOW,
                            resources: ['arn:' + cdk.Aws.PARTITION + ':ecr:' + cdk.Aws.REGION + ':' + cdk.Aws.ACCOUNT_ID + ':repository/*'],
                        }),
                        new iam.PolicyStatement({
                            actions: ['ecr:GetAuthorizationToken'],
                            effect: iam.Effect.ALLOW,
                            resources: ['*'],
                        }),
                        new iam.PolicyStatement({
                            actions: ['logs:CreateLogStream', 'logs:PutLogEvents'],
                            effect: iam.Effect.ALLOW,
                            resources: ['arn:' + cdk.Aws.PARTITION + ':logs:' + cdk.Aws.REGION + ':' + cdk.Aws.ACCOUNT_ID + ':log-group:*'],
                        }),
                    ],
                }),
            },
        });
        const webCrawlerContainer = new batch.EcsFargateContainerDefinition(this, 'webCrawlerContainer', {
            cpu: 2,
            memory: cdk.Size.mebibytes(6144),
            image: ecs.ContainerImage.fromAsset(path.join(__dirname, '../../../../resources/gen-ai/aws-web-crawler-container'), {
                platform: aws_ecr_assets.Platform.LINUX_AMD64,
            }),
            jobRole: webCrawlerJobRole,
            environment: {
                AWS_DEFAULT_REGION: cdk.Stack.of(this).region,
                TARGETS_TABLE_NAME: targetsTable.tableName,
                JOBS_TABLE_NAME: jobsTable.tableName,
                DATA_BUCKET_NAME: dataBucket.bucketName,
                SNS_TOPIC_ARN: snsTopic.topicArn,
            },
        });
        targetsTable.grantReadWriteData(webCrawlerJobRole);
        jobsTable.grantReadWriteData(webCrawlerJobRole);
        dataBucket.grantReadWrite(webCrawlerJobRole);
        snsTopic.grantPublish(webCrawlerJobRole);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(webCrawlerContainer.executionRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.',
            },
        ], true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(webCrawlerContainer.executionRole, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'The AWSLambdaBasicExecutionRole managed policy is required for ' + 'the Lambda function to write logs to CloudWatch.',
            },
        ]);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(webCrawlerJobRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.',
            },
        ], true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(webCrawlerJobRole, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'The AWSLambdaBasicExecutionRole managed policy is required for ' + 'the Lambda function to write logs to CloudWatch.',
            },
        ]);
        const webCrawlerJobDefinition = new batch.EcsJobDefinition(this, 'webCrawlerJob', {
            container: webCrawlerContainer,
            retryAttempts: 1,
            timeout: cdk.Duration.hours(48),
            retryStrategies: [
                batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.CANNOT_PULL_CONTAINER),
                batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.custom({
                    onExitCode: '137',
                })),
            ],
        });
        for (const target of props.targets ?? []) {
            let targetUrl = target.url.trim();
            if (!/^https?:\/\//.test(targetUrl.toLowerCase())) {
                targetUrl = `https://${targetUrl}`;
            }
            let target_s3_key = encodeURIComponent(url.parse(targetUrl).hostname?.replace(/\./g, '-').substring(0, 30) ?? targetUrl);
            const hash = crypto
                .createHash('sha256')
                .update(targetUrl)
                .digest('base64')
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .substring(0, 12);
            target_s3_key = `${target_s3_key}-${hash}`;
            new cr.AwsCustomResource(this, `target-${target_s3_key}`, {
                onCreate: {
                    service: 'DynamoDB',
                    action: 'putItem',
                    parameters: {
                        TableName: targetsTable.tableArn,
                        Item: {
                            target_url: { S: targetUrl },
                            target_s3_key: { S: target_s3_key },
                            target_type: { S: target.targetType },
                            sitemaps: { L: [] },
                            max_requests: { N: `${target.maxRequests ?? 0}` },
                            max_files: { N: `${target.maxFiles ?? 0}` },
                            download_files: { BOOL: target.downloadFiles ?? true },
                            file_types: { L: target.fileTypes ?? [] },
                            crawl_interval_hours: { N: `${target.crawlIntervalHours ?? 0}` },
                            last_finished_job_id: { S: '' },
                            last_finished_job_date: { S: '' },
                            created_at: { N: `${Date.now()}` },
                            updated_at: { N: `${Date.now()}` },
                        },
                    },
                    physicalResourceId: cr.PhysicalResourceId.of(targetUrl),
                },
                onUpdate: {
                    service: 'DynamoDB',
                    action: 'updateItem',
                    parameters: {
                        TableName: targetsTable.tableArn,
                        Key: {
                            target_url: { S: targetUrl },
                        },
                        UpdateExpression: 'SET target_type = :target_type, max_requests = :max_requests, max_files = :max_files, download_files = :download_files, file_types = :file_types, crawl_interval_hours = :crawl_interval_hours',
                        ExpressionAttributeValues: {
                            ':target_type': { S: target.targetType },
                            ':max_requests': { N: `${target.maxRequests ?? 0}` },
                            ':max_files': { N: `${target.maxFiles ?? 0}` },
                            ':download_files': { BOOL: target.downloadFiles ?? true },
                            ':file_types': { L: target.fileTypes ?? [] },
                            ':crawl_interval_hours': { N: `${target.crawlIntervalHours ?? 0}` },
                        },
                        ReturnValues: 'UPDATED_NEW',
                    },
                },
                onDelete: {
                    service: 'DynamoDB',
                    action: 'deleteItem',
                    parameters: {
                        TableName: targetsTable.tableArn,
                        Key: {
                            target_url: { S: targetUrl },
                        },
                    },
                },
                policy: cr.AwsCustomResourcePolicy.fromStatements([
                    new iam.PolicyStatement({
                        actions: ['dynamodb:PutItem', 'dynamodb:GetItem', 'dynamodb:DeleteItem', 'dynamodb:UpdateItem'],
                        resources: [targetsTable.tableArn],
                    }),
                ]),
            });
            cdk_nag_1.NagSuppressions.addResourceSuppressionsByPath(cdk.Stack.of(this), `${cdk.Stack.of(this).stackName}/AWS${cr.AwsCustomResource.PROVIDER_FUNCTION_UUID.replace(/-/g, '')}/ServiceRole/Resource`, [
                {
                    id: 'AwsSolutions-IAM4',
                    reason: 'CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.',
                },
            ]);
            cdk_nag_1.NagSuppressions.addResourceSuppressionsByPath(cdk.Stack.of(this), `${cdk.Stack.of(this).stackName}/AWS${cr.AwsCustomResource.PROVIDER_FUNCTION_UUID.replace(/-/g, '')}/Resource`, [
                {
                    id: 'AwsSolutions-L1',
                    reason: 'Lambda runtime version is managed upstream by CDK.',
                },
            ]);
        }
        const schedulerFunction = new lambda.Function(this, 'webCrawlerSchedulerFunction', {
            runtime: lambda.Runtime.PYTHON_3_12,
            handler: 'lambda.handler',
            functionName: 'lambda_crawler_scheduler' + this.stage,
            tracing: this.lambdaTracing,
            timeout: cdk.Duration.minutes(15),
            memorySize: 256,
            code: lambda.Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-web-crawler-scheduler')),
            logGroup: new logs.LogGroup(this, 'webCrawlerSchedulerLogGroup', { retention: logs.RetentionDays.ONE_WEEK }),
            environment: {
                TARGETS_TABLE_NAME: targetsTable.tableName,
                JOBS_TABLE_NAME: jobsTable.tableName,
                JOB_QUEUE_ARN: jobQueue.jobQueueArn,
                JOB_DEFINITION_ARN: webCrawlerJobDefinition.jobDefinitionArn,
            },
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(schedulerFunction.role, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.',
            },
        ]);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(schedulerFunction.role, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'AWSLambdaBasicExecutionRole is used.',
            },
        ], true);
        targetsTable.grantReadWriteData(schedulerFunction);
        jobsTable.grantReadWriteData(schedulerFunction);
        schedulerFunction.addToRolePolicy(new iam.PolicyStatement({
            actions: ['batch:SubmitJob'],
            resources: [webCrawlerJobDefinition.jobDefinitionArn, jobQueue.jobQueueArn],
        }));
        const rule = new events.Rule(this, 'webCrawlerSchedulerRule', {
            schedule: events.Schedule.expression('cron(0/15 * * * ? *)'),
        });
        rule.addTarget(new targets.LambdaFunction(schedulerFunction));
        if (props.enableLambdaCrawler) {
            const lambdaCrawler = new lambda.Function(this, 'lambdaCrawler', {
                architecture: lambda.Architecture.X86_64,
                functionName: 'lambda_crawler_function' + this.stage,
                tracing: this.lambdaTracing,
                timeout: cdk.Duration.minutes(15),
                memorySize: 2048,
                handler: 'index.handler',
                runtime: lambda.Runtime.NODEJS_20_X,
                code: lambda.Code.fromDockerBuild(path.join(__dirname, '../../../../lambda/aws-web-crawler-lambda')),
            });
            this.lambdaCrawler = lambdaCrawler;
            cdk_nag_1.NagSuppressions.addResourceSuppressions(lambdaCrawler.role, [
                {
                    id: 'AwsSolutions-IAM5',
                    reason: 'AWSLambdaBasicExecutionRole is used.',
                },
            ], true);
            cdk_nag_1.NagSuppressions.addResourceSuppressions(lambdaCrawler.role, [
                {
                    id: 'AwsSolutions-IAM4',
                    reason: 'Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.',
                },
            ]);
        }
        this.dataBucket = dataBucket;
        this.snsTopic = snsTopic;
        this.targetsTable = targetsTable;
        this.jobsTable = jobsTable;
        this.jobQueue = jobQueue;
        this.webCrawlerJobDefinition = webCrawlerJobDefinition;
        this.lambdaCrawlerApiSchemaPath = path.join(__dirname, '../../../../lambda/aws-web-crawler-lambda/action-group.yaml');
    }
}
exports.WebCrawler = WebCrawler;
_a = JSII_RTTI_SYMBOL_1;
WebCrawler[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.WebCrawler", version: "0.1.216" };
//# sourceMappingURL=data:application/json;base64,