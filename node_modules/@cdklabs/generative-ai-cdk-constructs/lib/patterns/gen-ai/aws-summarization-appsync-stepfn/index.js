"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummarizationAppsyncStepfn = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const ec2 = require("aws-cdk-lib/aws-ec2");
const events = require("aws-cdk-lib/aws-events");
const targets = require("aws-cdk-lib/aws-events-targets");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const s3 = require("aws-cdk-lib/aws-s3");
const sqs = require("aws-cdk-lib/aws-sqs");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const sfnTask = require("aws-cdk-lib/aws-stepfunctions-tasks");
const cdk_nag_1 = require("cdk-nag");
const base_class_1 = require("../../../common/base-class/base-class");
const construct_name_enum_1 = require("../../../common/base-class/construct-name-enum");
const eventBridge = require("../../../common/helpers/eventbridge-helper");
const lambda_builder_helper_1 = require("../../../common/helpers/lambda-builder-helper");
const s3BucketHelper = require("../../../common/helpers/s3-bucket-helper");
const utils_1 = require("../../../common/helpers/utils");
class SummarizationAppsyncStepfn extends base_class_1.BaseClass {
    /**
       * Constructs a new instance of the SummarizationAppsyncStepfn class.
       * @param {Construct} scope - represents the scope for all the resources.
       * @param {string} id - this is a a scope-unique id.
       * @param {SummarizationAppsyncStepfnProps} props - user provided props for the construct.
       * @since 0.0.0
       * @public
       */
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            stage: props.stage,
            constructName: construct_name_enum_1.ConstructName.AWSSUMMARIZATIONAPPSYNCSTEPFN,
            constructId: id,
            observability: props.observability,
        };
        this.updateEnvSuffix(baseProps);
        this.addObservabilityToConstruct(baseProps);
        // vpc
        if (props?.existingVpc) {
            this.vpc = props.existingVpc;
        }
        else {
            this.vpc = new ec2.Vpc(this, 'Vpc', props.vpcProps);
        }
        // Security group
        if (props?.existingSecurityGroup) {
            this.securityGroup = props.existingSecurityGroup;
        }
        else {
            this.securityGroup = new ec2.SecurityGroup(this, 'securityGroup', {
                vpc: this.vpc,
                allowAllOutbound: true,
            });
        }
        // vpc flowloggroup
        const logGroup = new logs.LogGroup(this, 'summarizationConstructLogGroup');
        const vpcFlowLogrole = new iam.Role(this, 'summarizationConstructRole', {
            assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),
        });
        // vpc flowlogs
        new ec2.FlowLog(this, 'FlowLog', {
            resourceType: ec2.FlowLogResourceType.fromVpc(this.vpc),
            destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, vpcFlowLogrole),
        });
        // bucket for storing server access logging
        const serverAccessLogBucket = new s3.Bucket(this, 'serverAccessLogBucket' + this.stage, {
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            encryption: s3.BucketEncryption.S3_MANAGED,
            enforceSSL: true,
            versioned: true,
            lifecycleRules: [{
                    expiration: aws_cdk_lib_1.Duration.days(90),
                }],
        });
        // bucket for input document
        s3BucketHelper.CheckS3Props({
            existingBucketObj: props.existingInputAssetsBucketObj,
            bucketProps: props.bucketInputsAssetsProps,
        });
        if (props?.existingInputAssetsBucketObj) {
            this.inputAssetBucket = props.existingInputAssetsBucketObj;
        }
        else if (props?.bucketInputsAssetsProps) {
            this.inputAssetBucket = new s3.Bucket(this, 'inputAssetsSummaryBucket' + this.stage, props.bucketInputsAssetsProps);
        }
        else {
            const bucketName = (0, utils_1.generatePhysicalNameV2)(this, 'input-assets-bucket' + this.stage, { maxLength: 63, lower: true });
            this.inputAssetBucket = new s3.Bucket(this, bucketName, {
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                encryption: s3.BucketEncryption.S3_MANAGED,
                bucketName: bucketName,
                serverAccessLogsBucket: serverAccessLogBucket,
                enforceSSL: true,
                versioned: true,
                lifecycleRules: [{
                        expiration: aws_cdk_lib_1.Duration.days(90),
                    }],
            });
        }
        // bucket for transformed document
        s3BucketHelper.CheckS3Props({
            existingBucketObj: props.existingProcessedAssetsBucketObj,
            bucketProps: props.bucketProcessedAssetsProps,
        });
        if (props?.existingProcessedAssetsBucketObj) {
            this.processedAssetBucket = props.existingProcessedAssetsBucketObj;
        }
        else if (props?.bucketProcessedAssetsProps) {
            this.processedAssetBucket = new s3.Bucket(this, 'processedAssetsSummaryBucket' + this.stage, props.bucketProcessedAssetsProps);
        }
        else {
            const bucketName = (0, utils_1.generatePhysicalNameV2)(this, 'processed-assets-bucket' + this.stage, { maxLength: 63, lower: true });
            this.processedAssetBucket = new s3.Bucket(this, bucketName, {
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                encryption: s3.BucketEncryption.S3_MANAGED,
                bucketName: bucketName,
                serverAccessLogsBucket: serverAccessLogBucket,
                enforceSSL: true,
                versioned: true,
                lifecycleRules: [{
                        expiration: aws_cdk_lib_1.Duration.days(90),
                    }],
            });
        }
        eventBridge.CheckEventBridgeProps(props);
        // Create event bridge
        this.eventBridgeBus = eventBridge.buildEventBus(this, {
            existingEventBusInterface: props.existingBusInterface,
            eventBusProps: props.eventBusProps,
        });
        // make it generic for other auth config as well
        const authorizationConfig = {
            defaultAuthorization: {
                authorizationType: appsync.AuthorizationType.USER_POOL,
                userPoolConfig: { userPool: props.cognitoUserPool },
            },
            additionalAuthorizationModes: [
                {
                    authorizationType: appsync.AuthorizationType.IAM,
                },
            ],
        };
        const apiName = props.summaryApiName || (0, utils_1.generatePhysicalNameV2)(this, 'summaryApi' + this.stage, { maxLength: 63, lower: true });
        // graphql api for summary. client invoke this api with given schema and cognito user pool auth.
        const summarizationGraphqlApi = new appsync.GraphqlApi(this, apiName, {
            name: apiName + this.stage,
            logConfig: {
                fieldLogLevel: this.fieldLogLevel,
                retention: this.retention,
            },
            definition: appsync.Definition.fromFile(path.join(__dirname, '../../../../resources/gen-ai/aws-summarization-appsync-stepfn/schema.graphql')),
            authorizationConfig: authorizationConfig,
            xrayEnabled: this.enablexray,
        });
        this.graphqlApi = summarizationGraphqlApi;
        this.graphqlApiId = summarizationGraphqlApi.apiId;
        this.graphqlUrl = summarizationGraphqlApi.graphqlUrl;
        // If the user provides a mergedApi endpoint, the lambda
        // functions will use this endpoint to send their status updates
        const updateGraphQlApiEndpoint = !props.existingMergedApi ? summarizationGraphqlApi.graphqlUrl : props.existingMergedApi.attrGraphQlUrl;
        const updateGraphQlApiId = !props.existingMergedApi ? summarizationGraphqlApi.apiId : props.existingMergedApi.attrApiId;
        // bucket
        const transformedAssetBucketName = this.processedAssetBucket.bucketName;
        const inputAssetBucketName = this.inputAssetBucket.bucketName;
        const isFileTransformationRequired = props?.isFileTransformationRequired || 'false';
        // role
        const inputvalidatorLambdaRole = new iam.Role(this, 'inputvalidatorLambdaRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            inlinePolicies: {
                LambdaFunctionServiceRolePolicy: new iam.PolicyDocument({
                    statements: [new iam.PolicyStatement({
                            actions: [
                                'logs:CreateLogGroup',
                                'logs:CreateLogStream',
                                'logs:PutLogEvents',
                            ],
                            resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`],
                        })],
                }),
            },
        });
        // Minimum permissions for a Lambda function to execute while accessing a resource within a VPC
        inputvalidatorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:CreateNetworkInterface',
                'ec2:DeleteNetworkInterface',
                'ec2:AssignPrivateIpAddresses',
                'ec2:UnassignPrivateIpAddresses',
            ],
            resources: [
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':ec2:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':*/*',
            ],
        }));
        // Decribe only works if it's allowed on all resources.
        // Reference: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html#vpc-permissions
        inputvalidatorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:DescribeNetworkInterfaces',
            ],
            resources: [
                '*',
            ],
        }));
        inputvalidatorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['s3:GetObject',
                's3:GetBucketLocation',
                's3:ListBucket',
                'appsync:GraphQL'],
            resources: ['arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + inputAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + transformedAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':apis/' + updateGraphQlApiId + '/*'],
        }));
        cdk_nag_1.NagSuppressions.addResourceSuppressions(inputvalidatorLambdaRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'AWSLambdaBasicExecutionRole is used.',
            },
        ], true);
        const construct_input_validation_lambda_props = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-summarization-appsync-stepfn/input_validator')),
            functionName: (0, utils_1.generatePhysicalNameV2)(this, 'summary_input_validator' + this.stage, { maxLength: 63, lower: true }),
            description: 'Lambda function to validate input for summary api',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 1),
            timeout: aws_cdk_lib_1.Duration.minutes(5),
            role: inputvalidatorLambdaRole,
            environment: {
                GRAPHQL_URL: updateGraphQlApiEndpoint,
            },
        };
        // Lambda function used to validate inputs in the step function
        const inputValidatorLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'inputValidatorLambda' + this.stage, construct_input_validation_lambda_props, props.customInputValidationDockerLambdaProps);
        // role
        const documentReaderLambdaRole = new iam.Role(this, 'documentReaderLambdaRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            inlinePolicies: {
                LambdaFunctionServiceRolePolicy: new iam.PolicyDocument({
                    statements: [new iam.PolicyStatement({
                            actions: [
                                'logs:CreateLogGroup',
                                'logs:CreateLogStream',
                                'logs:PutLogEvents',
                            ],
                            resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`],
                        })],
                }),
            },
        });
        // Minimum permissions for a Lambda function to execute while accessing a resource within a VPC
        documentReaderLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:CreateNetworkInterface',
                'ec2:DeleteNetworkInterface',
                'ec2:AssignPrivateIpAddresses',
                'ec2:UnassignPrivateIpAddresses',
            ],
            resources: [
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':ec2:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':*/*',
            ],
        }));
        // Decribe only works if it's allowed on all resources.
        // Reference: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html#vpc-permissions
        documentReaderLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:DescribeNetworkInterfaces',
            ],
            resources: [
                '*',
            ],
        }));
        documentReaderLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['s3:GetObject',
                's3:GetBucketLocation',
                's3:ListBucket',
                's3:PutObject',
                'appsync:GraphQL'],
            resources: ['arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + inputAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + transformedAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':apis/' + updateGraphQlApiId + '/*'],
        }));
        documentReaderLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'rekognition:DetectModerationLabels',
            ],
            resources: ['*'],
        }));
        cdk_nag_1.NagSuppressions.addResourceSuppressions(documentReaderLambdaRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'AWSLambdaBasicExecutionRole is used',
            },
        ], true);
        const construct_document_reader_lambda_props = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-summarization-appsync-stepfn/document_reader')),
            functionName: 'summary_document_reader' + this.stage,
            description: 'Lambda function to read the input transformed document',
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 1),
            tracing: this.lambdaTracing,
            timeout: aws_cdk_lib_1.Duration.minutes(5),
            role: documentReaderLambdaRole,
            environment: {
                TRANSFORMED_ASSET_BUCKET: transformedAssetBucketName,
                INPUT_ASSET_BUCKET: inputAssetBucketName,
                IS_FILE_TRANSFORMED: isFileTransformationRequired,
                GRAPHQL_URL: updateGraphQlApiEndpoint,
            },
        };
        // Lambda function used to read documents in the step function
        const documentReaderLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'documentReaderLambda' + this.stage, construct_document_reader_lambda_props, props.customDocumentReaderDockerLambdaProps);
        const summaryChainType = props?.summaryChainType || 'stuff';
        // role
        const summaryGeneratorLambdaRole = new iam.Role(this, 'summaryGeneratorLambdaRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            inlinePolicies: {
                LambdaFunctionServiceRolePolicy: new iam.PolicyDocument({
                    statements: [new iam.PolicyStatement({
                            actions: [
                                'logs:CreateLogGroup',
                                'logs:CreateLogStream',
                                'logs:PutLogEvents',
                            ],
                            resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`],
                        })],
                }),
            },
        });
        // Minimum permissions for a Lambda function to execute while accessing a resource within a VPC
        summaryGeneratorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:CreateNetworkInterface',
                'ec2:DeleteNetworkInterface',
                'ec2:AssignPrivateIpAddresses',
                'ec2:UnassignPrivateIpAddresses',
            ],
            resources: [
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':ec2:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':*/*',
            ],
        }));
        // Decribe only works if it's allowed on all resources.
        // Reference: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html#vpc-permissions
        summaryGeneratorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:DescribeNetworkInterfaces',
            ],
            resources: [
                '*',
            ],
        }));
        summaryGeneratorLambdaRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['s3:GetObject',
                's3:GetBucketLocation',
                's3:ListBucket',
                's3:PutObject',
                'appsync:GraphQL',
                'bedrock:InvokeModel',
                'bedrock:InvokeModelWithResponseStream'],
            resources: ['arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + inputAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + transformedAssetBucketName + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':apis/' + updateGraphQlApiId + '/*',
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':bedrock:' + aws_cdk_lib_1.Aws.REGION + '::foundation-model/*'],
        }));
        cdk_nag_1.NagSuppressions.addResourceSuppressions(summaryGeneratorLambdaRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'AWSLambdaBasicExecutionRole is used.',
            },
        ], true);
        const functionName = (0, utils_1.generatePhysicalNameV2)(this, 'summary_generator' + this.stage, { maxLength: 63, lower: true });
        const construct_generate_summary_lambda_props = {
            functionName: functionName,
            description: 'Lambda function to generate the summary',
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-summarization-appsync-stepfn/summary_generator')),
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 4),
            timeout: aws_cdk_lib_1.Duration.minutes(10),
            tracing: this.lambdaTracing,
            role: summaryGeneratorLambdaRole,
            environment: {
                ASSET_BUCKET_NAME: transformedAssetBucketName,
                GRAPHQL_URL: updateGraphQlApiEndpoint,
                SUMMARY_LLM_CHAIN_TYPE: summaryChainType,
            },
        };
        // Lambda function used to generate the summary in the step function
        const generateSummarylambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, functionName, construct_generate_summary_lambda_props, props.customSummaryGeneratorDockerLambdaProps);
        this.inputAssetBucket?.grantRead(generateSummarylambda);
        this.processedAssetBucket?.grantReadWrite(generateSummarylambda);
        this.inputAssetBucket?.grantRead(documentReaderLambda);
        this.processedAssetBucket?.grantReadWrite(documentReaderLambda);
        const lambdaFunctions = [documentReaderLambda, generateSummarylambda, inputValidatorLambda];
        this.updateConstructUsageMetricCode(baseProps, scope, lambdaFunctions);
        // create datasource at appsync
        const SummaryStatusDataSource = new appsync.NoneDataSource(this, 'noneDataSource' + this.stage, {
            api: summarizationGraphqlApi,
            name: 'SummaryStatusDataSource',
        });
        SummaryStatusDataSource.createResolver('summaryResponseresolver' + this.stage, {
            typeName: 'Mutation',
            fieldName: 'updateSummaryJobStatus',
            requestMappingTemplate: appsync.MappingTemplate.fromString('{ "version": "2017-02-28", "payload": $util.toJson($context.args) }'),
            responseMappingTemplate: appsync.MappingTemplate.fromString('$util.toJson($context.result)'),
        });
        // step functions
        const inputValidationTask = new sfnTask.LambdaInvoke(this, 'Validate Input ', {
            lambdaFunction: inputValidatorLambda,
            resultPath: '$.validation_result',
        });
        const documentReaderTask = new sfnTask.LambdaInvoke(this, 'Read document.', {
            lambdaFunction: documentReaderLambda,
            resultPath: '$.document_result',
        });
        const generateSummaryTask = new sfnTask.LambdaInvoke(this, 'Generate Summary with llm', {
            lambdaFunction: generateSummarylambda,
            resultPath: '$.summary_result',
        });
        const dlq = new sqs.Queue(this, 'dlq', {
            queueName: (0, utils_1.generatePhysicalNameV2)(this, 'summarydlq' + this.stage, { maxLength: 63, lower: true }),
            retentionPeriod: aws_cdk_lib_1.Duration.days(7),
            enforceSSL: true,
        });
        const jobFailed = new sfn.Fail(this, 'Failed', {
            comment: 'AWS summary Job failed',
        });
        const jobSuccess = new sfn.Succeed(this, 'succeeded', {
            comment: 'AWS summary Job succeeded',
        });
        // step function choice steps
        const validateInputChoice = new sfn.Choice(this, 'is Valid Parameters?', {
            outputPath: '$.validation_result.Payload.files',
        });
        const fileStatusForSummarization = new sfn.Choice(this, 'is file status ready for summarization?', {
            outputPath: '$.document_result.Payload',
        });
        // step function, run files in parallel
        const runFilesInparallel = new sfn.Map(this, 'Run Files in Parallel', {
            maxConcurrency: 100,
        }).itemProcessor(documentReaderTask.next(fileStatusForSummarization.when(sfn.Condition.stringMatches('$.document_result.Payload.status', 'Error'), jobSuccess).otherwise(generateSummaryTask.next(jobSuccess))));
        const maxLogGroupNameLength = 255;
        const logGroupPrefix = '/aws/vendedlogs/states/constructs/';
        const maxGeneratedNameLength = maxLogGroupNameLength - logGroupPrefix.length;
        const logGroupName = (0, utils_1.generatePhysicalNameV2)(this, logGroupPrefix, { maxLength: maxGeneratedNameLength, lower: true });
        const summarizationLogGroup = new logs.LogGroup(this, 'summarizationLogGroup', {
            logGroupName: logGroupName,
        });
        // step function definition
        const definition = inputValidationTask.next(validateInputChoice
            .when(sfn.Condition.booleanEquals('$.validation_result.Payload.isValid', false), jobFailed)
            .otherwise(runFilesInparallel));
        // step function
        const summarizationStepFunction = new sfn.StateMachine(this, 'summarizationStepFunction', {
            definitionBody: sfn.DefinitionBody.fromChainable(definition),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            logs: {
                destination: summarizationLogGroup,
                level: sfn.LogLevel.ALL,
            },
            tracingEnabled: this.enablexray,
        });
        this.stateMachine = summarizationStepFunction;
        // event bridge datasource for summarization api
        const eventBridgeDataSource = summarizationGraphqlApi.addEventBridgeDataSource('eventBridgeDataSource', this.eventBridgeBus);
        this.eventBridgeBus.grantPutEventsTo(eventBridgeDataSource.grantPrincipal);
        // add resolver on summary graphql schema
        eventBridgeDataSource.createResolver('generateSummary', {
            typeName: 'Mutation',
            fieldName: 'generateSummary',
            requestMappingTemplate: appsync.MappingTemplate.fromString(`
         {
          "version": "2018-05-29",
          "operation": "PutEvents",
          "events": [{
              "source": "summary",
              "detail": $util.toJson($context.arguments),
              "detailType": "genAIdemo"
          }
          ]
  } 
  `),
            responseMappingTemplate: appsync.MappingTemplate.fromString('#if($ctx.error)$utilerror($ctx.error.message, $ctx.error.type, $ctx.result) #end $util.toJson($ctx.result)'),
        });
        new events.Rule(this, 'SummaryMutationRule', {
            description: 'Summary Mutation Rule',
            eventBus: this.eventBridgeBus,
            eventPattern: {
                source: ['summary'],
            },
            targets: [
                new targets.SfnStateMachine(summarizationStepFunction, {
                    deadLetterQueue: dlq,
                    retryAttempts: 1,
                }),
            ],
        });
        this.documentReaderLambdaFunction = documentReaderLambda;
        this.inputValidationLambdaFunction = inputValidatorLambda;
        this.summaryGeneratorLambdaFunction = generateSummarylambda;
    }
}
exports.SummarizationAppsyncStepfn = SummarizationAppsyncStepfn;
_a = JSII_RTTI_SYMBOL_1;
SummarizationAppsyncStepfn[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.SummarizationAppsyncStepfn", version: "0.1.216" };
//# sourceMappingURL=data:application/json;base64,